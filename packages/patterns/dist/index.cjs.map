{"version":3,"sources":["../src/index.ts","../src/column-ops/add-column-pattern.ts","../src/column-ops/drop-column-pattern.ts","../src/column-ops/rename-column-pattern.ts","../src/column-ops/modify-column-pattern.ts","../src/constraint-ops/add-constraint.ts","../src/constraint-ops/drop-constraint.ts","../src/constraint-ops/foreign-key.ts","../src/constraint-ops/unique-constraint.ts","../src/index-ops/create-index.ts","../src/index-ops/drop-index.ts","../src/index-ops/concurrent-index.ts"],"sourcesContent":["// Migration safety patterns for DriftJS\nexport * from './column-ops/index.js'\nexport * from './constraint-ops/index.js'\nexport * from './index-ops/index.js' ","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for adding columns safely\n */\nexport interface AddColumnPatternConfig {\n  tableName: string;\n  columnName: string;\n  columnType: string;\n  nullable: boolean;\n  defaultValue?: string | number | boolean;\n  comment?: string;\n  batchSize?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Safe column addition pattern result\n */\nexport interface AddColumnPatternResult {\n  steps: SafeColumnStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';\n  rollbackSteps: SafeColumnStep[];\n  preflightChecks: string[];\n  warnings: string[];\n}\n\n/**\n * Individual step in safe column addition\n */\nexport interface SafeColumnStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n}\n\n/**\n * Safe Column Addition Pattern\n * Implements the safest way to add columns, especially NOT NULL columns\n */\nexport class AddColumnPattern {\n  /**\n   * Generate safe column addition steps\n   */\n  public generateSafeSteps(config: AddColumnPatternConfig): AddColumnPatternResult {\n    const steps: SafeColumnStep[] = [];\n    const rollbackSteps: SafeColumnStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Determine if this is a risky operation\n    const isNotNullWithoutDefault = !config.nullable && config.defaultValue === undefined;\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    if (isNotNullWithoutDefault) {\n      // High-risk pattern: NOT NULL column without default\n      this.generateNotNullWithoutDefaultSteps(config, steps, rollbackSteps, warnings);\n    } else if (!config.nullable && config.defaultValue !== undefined) {\n      // Medium-risk pattern: NOT NULL column with default\n      this.generateNotNullWithDefaultSteps(config, steps, rollbackSteps, warnings);\n    } else {\n      // Low-risk pattern: Nullable column\n      this.generateNullableColumnSteps(config, steps, rollbackSteps);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(), // Reverse for proper rollback order\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Assess risk level for column addition\n   */\n  private assessRiskLevel(config: AddColumnPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' {\n    if (!config.nullable && config.defaultValue === undefined) {\n      return 'HIGH'; // NOT NULL without default requires table scan\n    }\n    if (!config.nullable && config.defaultValue !== undefined) {\n      return 'MEDIUM'; // NOT NULL with default is safer but still requires caution\n    }\n    return 'LOW'; // Nullable columns are generally safe\n  }\n\n  /**\n   * Add preflight checks for the operation\n   */\n  private addPreflightChecks(config: AddColumnPatternConfig, checks: string[]): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Check if column '${config.columnName}' already exists`,\n      `Verify database has sufficient storage space`,\n      `Check for active long-running transactions`,\n      `Verify table is not currently locked`\n    );\n\n    if (!config.nullable && config.defaultValue === undefined) {\n      checks.push(\n        `Verify table '${config.tableName}' has no existing rows (or plan for data migration)`,\n        `Check table size to estimate operation duration`\n      );\n    }\n  }\n\n  /**\n   * Generate steps for NOT NULL column without default (highest risk)\n   */\n  private generateNotNullWithoutDefaultSteps(\n    config: AddColumnPatternConfig,\n    steps: SafeColumnStep[],\n    rollbackSteps: SafeColumnStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Adding NOT NULL column without default value is high-risk',\n      'This operation will fail if table contains existing data',\n      'Consider adding a default value or making column nullable initially'\n    );\n\n    // Step 1: Add column as nullable first\n    steps.push({\n      id: 'add-nullable-column',\n      description: `Add column ${config.columnName} as nullable`,\n      sql: `ALTER TABLE ${config.tableName} ADD COLUMN ${config.columnName} ${config.columnType} NULL${config.comment ? ` COMMENT '${config.comment}'` : ''};`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT column_name FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: config.columnName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-add-nullable-column',\n      description: `Remove column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.columnName};`,\n      estimatedDurationMs: 1000,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n\n    // Step 2: Update existing rows (if any) with appropriate values\n    steps.push({\n      id: 'populate-column-values',\n      description: `Populate values for column ${config.columnName}`,\n      sql: `UPDATE ${config.tableName} SET ${config.columnName} = 'PLACEHOLDER_VALUE' WHERE ${config.columnName} IS NULL;`,\n      estimatedDurationMs: 10000,\n      canRollback: true,\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.columnName} IS NULL;`,\n      expectedResult: 0\n    });\n\n    // Step 3: Add NOT NULL constraint\n    steps.push({\n      id: 'add-not-null-constraint',\n      description: `Add NOT NULL constraint to column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} ALTER COLUMN ${config.columnName} SET NOT NULL;`,\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT is_nullable FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: 'NO'\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-not-null-constraint',\n      description: `Remove NOT NULL constraint from column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} ALTER COLUMN ${config.columnName} DROP NOT NULL;`,\n      estimatedDurationMs: 1000,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n  }\n\n  /**\n   * Generate steps for NOT NULL column with default (medium risk)\n   */\n  private generateNotNullWithDefaultSteps(\n    config: AddColumnPatternConfig,\n    steps: SafeColumnStep[],\n    rollbackSteps: SafeColumnStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Adding NOT NULL column with default value requires table scan',\n      'Operation duration depends on table size',\n      'Consider adding during maintenance window for large tables'\n    );\n\n    // Single step: Add column with default and NOT NULL\n    const defaultValue = typeof config.defaultValue === 'string' ? `'${config.defaultValue}'` : config.defaultValue;\n    \n    steps.push({\n      id: 'add-not-null-column-with-default',\n      description: `Add NOT NULL column ${config.columnName} with default value`,\n      sql: `ALTER TABLE ${config.tableName} ADD COLUMN ${config.columnName} ${config.columnType} NOT NULL DEFAULT ${defaultValue}${config.comment ? ` COMMENT '${config.comment}'` : ''};`,\n      estimatedDurationMs: 8000,\n      canRollback: true,\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT column_name, is_nullable, column_default FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: { column_name: config.columnName, is_nullable: 'NO', column_default: defaultValue }\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-add-not-null-column',\n      description: `Remove column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.columnName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n  }\n\n  /**\n   * Generate steps for nullable column (low risk)\n   */\n  private generateNullableColumnSteps(\n    config: AddColumnPatternConfig,\n    steps: SafeColumnStep[],\n    rollbackSteps: SafeColumnStep[]\n  ): void {\n    // Single step: Add nullable column\n    const defaultClause = config.defaultValue ? ` DEFAULT ${typeof config.defaultValue === 'string' ? `'${config.defaultValue}'` : config.defaultValue}` : '';\n    \n    steps.push({\n      id: 'add-nullable-column',\n      description: `Add nullable column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} ADD COLUMN ${config.columnName} ${config.columnType}${defaultClause}${config.comment ? ` COMMENT '${config.comment}'` : ''};`,\n      estimatedDurationMs: 1000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT column_name FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: config.columnName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-add-nullable-column',\n      description: `Remove column ${config.columnName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.columnName};`,\n      estimatedDurationMs: 500,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n  }\n\n  /**\n   * Generate validation queries for the operation\n   */\n  public generateValidationQueries(config: AddColumnPatternConfig): string[] {\n    return [\n      `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      `SELECT data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.columnName} IS NULL;`\n    ];\n  }\n\n  /**\n   * Generate performance impact estimation\n   */\n  public estimatePerformanceImpact(config: AddColumnPatternConfig, tableRowCount: number): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    const baseTime = 1000; // 1 second base time\n    const rowProcessingTime = tableRowCount * 0.1; // 0.1ms per row\n    const typeOverhead = this.getTypeOverhead(config.columnType);\n    \n    const estimatedDurationMs = baseTime + rowProcessingTime + typeOverhead;\n    const memoryUsageMB = Math.max(10, tableRowCount * 0.001); // Minimum 10MB\n    const diskSpaceRequiredMB = tableRowCount * this.getColumnSize(config.columnType) / (1024 * 1024);\n    const recommendedMaintenanceWindow = estimatedDurationMs > 30000 || !config.nullable;\n\n    return {\n      estimatedDurationMs,\n      memoryUsageMB,\n      diskSpaceRequiredMB,\n      recommendedMaintenanceWindow\n    };\n  }\n\n  /**\n   * Get processing time overhead for different column types\n   */\n  private getTypeOverhead(columnType: string): number {\n    const type = columnType.toLowerCase();\n    \n    if (type.includes('text') || type.includes('varchar')) {\n      return 2000; // String types take longer\n    }\n    if (type.includes('json') || type.includes('jsonb')) {\n      return 3000; // JSON types take even longer\n    }\n    if (type.includes('decimal') || type.includes('numeric')) {\n      return 1500; // Numeric types have medium overhead\n    }\n    \n    return 500; // Default for simple types\n  }\n\n  /**\n   * Get approximate storage size for column types\n   */\n  private getColumnSize(columnType: string): number {\n    const type = columnType.toLowerCase();\n    \n    if (type.includes('bigint') || type.includes('int8')) return 8;\n    if (type.includes('int') || type.includes('integer')) return 4;\n    if (type.includes('smallint') || type.includes('int2')) return 2;\n    if (type.includes('boolean') || type.includes('bool')) return 1;\n    if (type.includes('uuid')) return 16;\n    if (type.includes('timestamp')) return 8;\n    if (type.includes('date')) return 4;\n    if (type.includes('decimal') || type.includes('numeric')) return 8;\n    if (type.includes('varchar') || type.includes('text')) return 50; // Average estimate\n    if (type.includes('json')) return 100; // Average estimate\n    \n    return 8; // Default estimate\n  }\n} ","/**\n * Configuration for dropping columns safely\n */\nexport interface DropColumnPatternConfig {\n  tableName: string;\n  columnName: string;\n  createBackup: boolean;\n  backupTableName?: string;\n  confirmDataLoss: boolean;\n  timeoutMs?: number;\n}\n\n/**\n * Safe column drop pattern result\n */\nexport interface DropColumnPatternResult {\n  steps: SafeDropStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeDropStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  dataLossWarnings: string[];\n}\n\n/**\n * Individual step in safe column drop\n */\nexport interface SafeDropStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  isDestructive: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n}\n\n/**\n * Safe Column Drop Pattern\n * Implements the safest way to drop columns with data preservation options\n */\nexport class DropColumnPattern {\n  /**\n   * Generate safe column drop steps\n   */\n  public generateSafeSteps(config: DropColumnPatternConfig): DropColumnPatternResult {\n    const steps: SafeDropStep[] = [];\n    const rollbackSteps: SafeDropStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n    const dataLossWarnings: string[] = [];\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    // Add data loss warnings\n    this.addDataLossWarnings(config, dataLossWarnings);\n\n    if (config.createBackup) {\n      // High-safety pattern: Create backup before dropping\n      this.generateBackupAndDropSteps(config, steps, rollbackSteps, warnings);\n    } else {\n      // Standard pattern: Direct drop (requires confirmation)\n      this.generateDirectDropSteps(config, steps, rollbackSteps, warnings);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(), // Reverse for proper rollback order\n      preflightChecks,\n      warnings,\n      dataLossWarnings\n    };\n  }\n\n  /**\n   * Assess risk level for column drop\n   */\n  private assessRiskLevel(config: DropColumnPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (!config.confirmDataLoss) {\n      return 'CRITICAL'; // Cannot proceed without data loss confirmation\n    }\n    if (!config.createBackup) {\n      return 'HIGH'; // No backup means permanent data loss\n    }\n    return 'MEDIUM'; // With backup, risk is reduced but still significant\n  }\n\n  /**\n   * Add preflight checks for the operation\n   */\n  private addPreflightChecks(config: DropColumnPatternConfig, checks: string[]): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify column '${config.columnName}' exists in table '${config.tableName}'`,\n      `Check if column '${config.columnName}' is part of any indexes`,\n      `Check if column '${config.columnName}' is part of any constraints`,\n      `Check if column '${config.columnName}' is referenced by foreign keys`,\n      `Verify database has sufficient storage space for backup (if creating backup)`,\n      `Check for active long-running transactions`,\n      `Verify table is not currently locked`\n    );\n\n    if (config.createBackup) {\n      const backupTableName = config.backupTableName || `${config.tableName}_backup_${Date.now()}`;\n      checks.push(\n        `Verify backup table name '${backupTableName}' is available`,\n        `Check permissions to create backup table`\n      );\n    }\n  }\n\n  /**\n   * Add data loss warnings\n   */\n  private addDataLossWarnings(config: DropColumnPatternConfig, warnings: string[]): void {\n    warnings.push(\n      `⚠️  CRITICAL: Dropping column '${config.columnName}' will permanently delete all data in this column`,\n      `⚠️  This operation cannot be undone without a backup`,\n      `⚠️  Ensure all applications and queries no longer reference this column`\n    );\n\n    if (!config.createBackup) {\n      warnings.push(\n        `⚠️  DANGER: No backup will be created - data will be permanently lost`,\n        `⚠️  Consider creating a backup table before proceeding`\n      );\n    }\n\n    if (!config.confirmDataLoss) {\n      warnings.push(\n        `⚠️  BLOCKED: Cannot proceed without explicit data loss confirmation`,\n        `⚠️  Set confirmDataLoss: true to acknowledge data will be permanently deleted`\n      );\n    }\n  }\n\n  /**\n   * Generate steps with backup creation (safer approach)\n   */\n  private generateBackupAndDropSteps(\n    config: DropColumnPatternConfig,\n    steps: SafeDropStep[],\n    rollbackSteps: SafeDropStep[],\n    warnings: string[]\n  ): void {\n    const backupTableName = config.backupTableName || `${config.tableName}_backup_${Date.now()}`;\n\n    warnings.push(\n      'Creating backup table before dropping column',\n      `Backup will be stored in table: ${backupTableName}`,\n      'This operation will require additional storage space'\n    );\n\n    // Step 1: Create backup table with full data\n    steps.push({\n      id: 'create-backup-table',\n      description: `Create backup table ${backupTableName}`,\n      sql: `CREATE TABLE ${backupTableName} AS SELECT * FROM ${config.tableName};`,\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      isDestructive: false,\n      validationQuery: `SELECT COUNT(*) FROM ${backupTableName};`,\n      expectedResult: 'row_count > 0'\n    });\n\n    rollbackSteps.push({\n      id: 'cleanup-backup-table',\n      description: `Remove backup table ${backupTableName}`,\n      sql: `DROP TABLE IF EXISTS ${backupTableName};`,\n      estimatedDurationMs: 1000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      isDestructive: true\n    });\n\n    // Step 2: Drop dependent objects (indexes, constraints)\n    steps.push({\n      id: 'drop-dependent-objects',\n      description: `Drop indexes and constraints dependent on column ${config.columnName}`,\n      sql: `-- This step will be dynamically generated based on discovered dependencies`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      isDestructive: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: 0\n    });\n\n    // Step 3: Drop the column\n    steps.push({\n      id: 'drop-column',\n      description: `Drop column ${config.columnName} from table ${config.tableName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.columnName};`,\n      estimatedDurationMs: 3000,\n      canRollback: false, // Cannot rollback after column is dropped\n      requiresMaintenanceWindow: true,\n      isDestructive: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: 0\n    });\n\n    // Add potential rollback from backup (complex operation)\n    rollbackSteps.push({\n      id: 'restore-from-backup',\n      description: `Restore table ${config.tableName} from backup ${backupTableName}`,\n      sql: `-- MANUAL PROCESS: Compare schemas and restore data as needed from ${backupTableName}`,\n      estimatedDurationMs: 30000,\n      canRollback: false,\n      requiresMaintenanceWindow: true,\n      isDestructive: true\n    });\n  }\n\n  /**\n   * Generate steps for direct drop (higher risk)\n   */\n  private generateDirectDropSteps(\n    config: DropColumnPatternConfig,\n    steps: SafeDropStep[],\n    rollbackSteps: SafeDropStep[],\n    warnings: string[]\n  ): void {\n    if (!config.confirmDataLoss) {\n      // Block the operation if data loss not confirmed\n      steps.push({\n        id: 'blocked-operation',\n        description: 'Operation blocked - data loss confirmation required',\n        sql: '-- BLOCKED: Set confirmDataLoss: true to proceed',\n        estimatedDurationMs: 0,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        isDestructive: false\n      });\n      return;\n    }\n\n    warnings.push(\n      'Performing direct column drop without backup',\n      'Data will be permanently lost and cannot be recovered',\n      'Ensure this is intended and all dependencies are handled'\n    );\n\n    // Step 1: Drop dependent objects (indexes, constraints)\n    steps.push({\n      id: 'drop-dependent-objects',\n      description: `Drop indexes and constraints dependent on column ${config.columnName}`,\n      sql: `-- This step will be dynamically generated based on discovered dependencies`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      isDestructive: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: 0\n    });\n\n    // Step 2: Drop the column\n    steps.push({\n      id: 'drop-column',\n      description: `Drop column ${config.columnName} from table ${config.tableName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.columnName};`,\n      estimatedDurationMs: 3000,\n      canRollback: false, // Cannot rollback after column is dropped\n      requiresMaintenanceWindow: true,\n      isDestructive: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: 0\n    });\n\n    // No rollback possible for direct drop\n    rollbackSteps.push({\n      id: 'no-rollback-available',\n      description: 'No rollback available - data permanently lost',\n      sql: '-- NO ROLLBACK: Column and data permanently deleted',\n      estimatedDurationMs: 0,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      isDestructive: false\n    });\n  }\n\n  /**\n   * Generate validation queries for the operation\n   */\n  public generateValidationQueries(config: DropColumnPatternConfig): string[] {\n    return [\n      `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      `SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      `SELECT COUNT(*) FROM information_schema.key_column_usage WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      `SELECT data_type, is_nullable FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`\n    ];\n  }\n\n  /**\n   * Generate queries to discover dependencies before dropping\n   */\n  public generateDependencyQueries(config: DropColumnPatternConfig): string[] {\n    return [\n      // Find indexes that include this column\n      `SELECT index_name FROM information_schema.statistics WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      \n      // Find foreign key constraints\n      `SELECT constraint_name FROM information_schema.key_column_usage WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}' AND referenced_table_name IS NOT NULL;`,\n      \n      // Find check constraints (MySQL/PostgreSQL specific)\n      `SELECT constraint_name FROM information_schema.check_constraints cc JOIN information_schema.constraint_column_usage ccu ON cc.constraint_name = ccu.constraint_name WHERE ccu.table_name = '${config.tableName}' AND ccu.column_name = '${config.columnName}';`,\n      \n      // Find unique constraints\n      `SELECT constraint_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name WHERE tc.table_name = '${config.tableName}' AND kcu.column_name = '${config.columnName}' AND tc.constraint_type = 'UNIQUE';`\n    ];\n  }\n\n  /**\n   * Generate performance impact estimation\n   */\n  public estimatePerformanceImpact(config: DropColumnPatternConfig, tableRowCount: number): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceFreedMB: number;\n    diskSpaceRequiredForBackupMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    const baseTime = 2000; // 2 second base time\n    const rowProcessingTime = tableRowCount * 0.05; // 0.05ms per row for drop\n    const backupTime = config.createBackup ? tableRowCount * 0.2 : 0; // 0.2ms per row for backup\n    \n    const estimatedDurationMs = baseTime + rowProcessingTime + backupTime;\n    const memoryUsageMB = Math.max(5, tableRowCount * 0.0005); // Minimum 5MB\n    \n    // Estimate column size for disk space calculations\n    const avgColumnSize = 50; // Average 50 bytes per column value\n    const diskSpaceFreedMB = (tableRowCount * avgColumnSize) / (1024 * 1024);\n    const diskSpaceRequiredForBackupMB = config.createBackup ? (tableRowCount * 200) / (1024 * 1024) : 0; // Full table backup\n    \n    const recommendedMaintenanceWindow = estimatedDurationMs > 10000 || config.createBackup;\n\n    return {\n      estimatedDurationMs,\n      memoryUsageMB,\n      diskSpaceFreedMB,\n      diskSpaceRequiredForBackupMB,\n      recommendedMaintenanceWindow\n    };\n  }\n\n  /**\n   * Validate configuration before execution\n   */\n  public validateConfig(config: DropColumnPatternConfig): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!config.tableName) {\n      errors.push('Table name is required');\n    }\n\n    if (!config.columnName) {\n      errors.push('Column name is required');\n    }\n\n    if (!config.confirmDataLoss) {\n      errors.push('Data loss confirmation is required (confirmDataLoss: true)');\n    }\n\n    if (config.createBackup && config.backupTableName) {\n      if (config.backupTableName === config.tableName) {\n        errors.push('Backup table name cannot be the same as source table');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n} ","/**\n * Configuration for renaming columns safely\n */\nexport interface RenameColumnPatternConfig {\n  tableName: string;\n  oldColumnName: string;\n  newColumnName: string;\n  useTemporaryColumn: boolean;\n  migrateData: boolean;\n  timeoutMs?: number;\n}\n\n/**\n * Safe column rename pattern result\n */\nexport interface RenameColumnPatternResult {\n  steps: SafeRenameStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';\n  rollbackSteps: SafeRenameStep[];\n  preflightChecks: string[];\n  warnings: string[];\n}\n\n/**\n * Individual step in safe column rename\n */\nexport interface SafeRenameStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n}\n\n/**\n * Safe Column Rename Pattern\n * Implements the safest way to rename columns using temporary column approach\n */\nexport class RenameColumnPattern {\n  /**\n   * Generate safe column rename steps\n   */\n  public generateSafeSteps(config: RenameColumnPatternConfig): RenameColumnPatternResult {\n    const steps: SafeRenameStep[] = [];\n    const rollbackSteps: SafeRenameStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    if (config.useTemporaryColumn) {\n      // Safer pattern: Use temporary column approach\n      this.generateTemporaryColumnSteps(config, steps, rollbackSteps, warnings);\n    } else {\n      // Direct rename (faster but riskier for some databases)\n      this.generateDirectRenameSteps(config, steps, rollbackSteps, warnings);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(), // Reverse for proper rollback order\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Assess risk level for column rename\n   */\n  private assessRiskLevel(config: RenameColumnPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' {\n    if (config.useTemporaryColumn && config.migrateData) {\n      return 'MEDIUM'; // Temporary column with data migration is safer but more complex\n    }\n    if (config.useTemporaryColumn) {\n      return 'LOW'; // Temporary column without data migration is safest\n    }\n    return 'MEDIUM'; // Direct rename has some risk depending on database\n  }\n\n  /**\n   * Add preflight checks for the operation\n   */\n  private addPreflightChecks(config: RenameColumnPatternConfig, checks: string[]): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify column '${config.oldColumnName}' exists in table '${config.tableName}'`,\n      `Verify column '${config.newColumnName}' does not already exist in table '${config.tableName}'`,\n      `Check if column '${config.oldColumnName}' is part of any indexes`,\n      `Check if column '${config.oldColumnName}' is part of any constraints`,\n      `Check if column '${config.oldColumnName}' is referenced by foreign keys`,\n      `Verify database has sufficient storage space (if using temporary column)`,\n      `Check for active long-running transactions`,\n      `Verify table is not currently locked`\n    );\n\n    if (config.migrateData) {\n      checks.push(\n        `Verify data compatibility between old and new column definitions`,\n        `Check table size to estimate data migration duration`\n      );\n    }\n  }\n\n  /**\n   * Generate steps using temporary column approach (safer)\n   */\n  private generateTemporaryColumnSteps(\n    config: RenameColumnPatternConfig,\n    steps: SafeRenameStep[],\n    rollbackSteps: SafeRenameStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Using temporary column approach for safer rename operation',\n      'This method allows for gradual migration and easier rollback',\n      'Operation will require temporary storage space'\n    );\n\n    // Step 1: Get original column definition\n    const getColumnDefStep: SafeRenameStep = {\n      id: 'get-column-definition',\n      description: `Get definition of column ${config.oldColumnName}`,\n      sql: `SELECT column_type, is_nullable, column_default, extra FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`,\n      estimatedDurationMs: 500,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`,\n      expectedResult: 1\n    };\n    steps.push(getColumnDefStep);\n\n    // Step 2: Add new column with same definition\n    steps.push({\n      id: 'add-new-column',\n      description: `Add new column ${config.newColumnName} with same definition as ${config.oldColumnName}`,\n      sql: `-- This will be dynamically generated based on the original column definition`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.newColumnName}';`,\n      expectedResult: 1\n    });\n\n    rollbackSteps.push({\n      id: 'remove-new-column',\n      description: `Remove new column ${config.newColumnName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.newColumnName};`,\n      estimatedDurationMs: 1000,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n\n    if (config.migrateData) {\n      // Step 3: Copy data from old column to new column\n      steps.push({\n        id: 'migrate-data',\n        description: `Copy data from ${config.oldColumnName} to ${config.newColumnName}`,\n        sql: `UPDATE ${config.tableName} SET ${config.newColumnName} = ${config.oldColumnName};`,\n        estimatedDurationMs: 10000,\n        canRollback: true,\n        requiresMaintenanceWindow: true,\n        validationQuery: `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.oldColumnName} != ${config.newColumnName} OR (${config.oldColumnName} IS NULL AND ${config.newColumnName} IS NOT NULL) OR (${config.oldColumnName} IS NOT NULL AND ${config.newColumnName} IS NULL);`,\n        expectedResult: 0\n      });\n\n      // Step 4: Verify data integrity\n      steps.push({\n        id: 'verify-data-integrity',\n        description: `Verify data was copied correctly from ${config.oldColumnName} to ${config.newColumnName}`,\n        sql: `SELECT COUNT(*) as mismatched_rows FROM ${config.tableName} WHERE ${config.oldColumnName} != ${config.newColumnName};`,\n        estimatedDurationMs: 2000,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        validationQuery: `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.oldColumnName} != ${config.newColumnName};`,\n        expectedResult: 0\n      });\n    }\n\n    // Step 5: Drop old column\n    steps.push({\n      id: 'drop-old-column',\n      description: `Drop old column ${config.oldColumnName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP COLUMN ${config.oldColumnName};`,\n      estimatedDurationMs: 3000,\n      canRollback: false, // Cannot rollback after column is dropped\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`,\n      expectedResult: 0\n    });\n\n    // Add rollback warning for final step\n    rollbackSteps.push({\n      id: 'rollback-warning',\n      description: 'Manual intervention required to restore dropped column',\n      sql: `-- WARNING: Original column ${config.oldColumnName} was dropped and cannot be automatically restored`,\n      estimatedDurationMs: 0,\n      canRollback: false,\n      requiresMaintenanceWindow: false\n    });\n  }\n\n  /**\n   * Generate steps for direct rename (faster but less safe)\n   */\n  private generateDirectRenameSteps(\n    config: RenameColumnPatternConfig,\n    steps: SafeRenameStep[],\n    rollbackSteps: SafeRenameStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Using direct rename approach - faster but less safe',\n      'This method may not be supported on all database systems',\n      'Rollback capabilities are limited with this approach'\n    );\n\n    // MySQL/PostgreSQL have different syntax for column rename\n    const mysqlSql = `ALTER TABLE ${config.tableName} CHANGE ${config.oldColumnName} ${config.newColumnName} -- COLUMN_DEFINITION_HERE;`;\n    const postgresqlSql = `ALTER TABLE ${config.tableName} RENAME COLUMN ${config.oldColumnName} TO ${config.newColumnName};`;\n\n    steps.push({\n      id: 'direct-rename',\n      description: `Directly rename column ${config.oldColumnName} to ${config.newColumnName}`,\n      sql: `-- Database-specific SQL will be generated: MySQL uses CHANGE, PostgreSQL uses RENAME COLUMN`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.newColumnName}';`,\n      expectedResult: 1\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-direct-rename',\n      description: `Rename column ${config.newColumnName} back to ${config.oldColumnName}`,\n      sql: `-- Database-specific rollback SQL will be generated`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: true\n    });\n  }\n\n  /**\n   * Generate database-specific rename SQL\n   */\n  public generateDatabaseSpecificSql(\n    config: RenameColumnPatternConfig,\n    database: 'postgresql' | 'mysql' | 'sqlite',\n    columnDefinition?: string\n  ): { renameSql: string; rollbackSql: string } {\n    switch (database) {\n      case 'postgresql':\n        return {\n          renameSql: `ALTER TABLE ${config.tableName} RENAME COLUMN ${config.oldColumnName} TO ${config.newColumnName};`,\n          rollbackSql: `ALTER TABLE ${config.tableName} RENAME COLUMN ${config.newColumnName} TO ${config.oldColumnName};`\n        };\n\n      case 'mysql':\n        const columnDef = columnDefinition || 'TEXT'; // Default if not provided\n        return {\n          renameSql: `ALTER TABLE ${config.tableName} CHANGE ${config.oldColumnName} ${config.newColumnName} ${columnDef};`,\n          rollbackSql: `ALTER TABLE ${config.tableName} CHANGE ${config.newColumnName} ${config.oldColumnName} ${columnDef};`\n        };\n\n      case 'sqlite':\n        // SQLite doesn't support column rename directly, must use temporary table approach\n        return {\n          renameSql: `-- SQLite requires table recreation for column rename - use temporary column approach`,\n          rollbackSql: `-- SQLite rollback requires table recreation`\n        };\n\n      default:\n        throw new Error(`Unsupported database: ${database}`);\n    }\n  }\n\n  /**\n   * Generate validation queries for the operation\n   */\n  public generateValidationQueries(config: RenameColumnPatternConfig): string[] {\n    return [\n      `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`,\n      `SELECT COUNT(*) FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.newColumnName}';`,\n      `SELECT column_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`,\n      `SELECT COUNT(*) FROM information_schema.statistics WHERE table_name = '${config.tableName}' AND column_name = '${config.oldColumnName}';`\n    ];\n  }\n\n  /**\n   * Generate performance impact estimation\n   */\n  public estimatePerformanceImpact(config: RenameColumnPatternConfig, tableRowCount: number): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    const baseTime = config.useTemporaryColumn ? 5000 : 2000; // Temporary column takes longer\n    const dataMigrationTime = config.migrateData ? tableRowCount * 0.1 : 0; // 0.1ms per row\n    \n    const estimatedDurationMs = baseTime + dataMigrationTime;\n    const memoryUsageMB = Math.max(5, tableRowCount * 0.0005); // Minimum 5MB\n    const diskSpaceRequiredMB = config.useTemporaryColumn ? (tableRowCount * 50) / (1024 * 1024) : 0; // Temporary column space\n    const recommendedMaintenanceWindow = config.migrateData || estimatedDurationMs > 10000;\n\n    return {\n      estimatedDurationMs,\n      memoryUsageMB,\n      diskSpaceRequiredMB,\n      recommendedMaintenanceWindow\n    };\n  }\n\n  /**\n   * Validate configuration before execution\n   */\n  public validateConfig(config: RenameColumnPatternConfig): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!config.tableName) {\n      errors.push('Table name is required');\n    }\n\n    if (!config.oldColumnName) {\n      errors.push('Old column name is required');\n    }\n\n    if (!config.newColumnName) {\n      errors.push('New column name is required');\n    }\n\n    if (config.oldColumnName === config.newColumnName) {\n      errors.push('Old and new column names must be different');\n    }\n\n    // Check for valid column name patterns\n    const columnNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n    if (config.newColumnName && !columnNamePattern.test(config.newColumnName)) {\n      errors.push('New column name contains invalid characters');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n} ","/**\n * Configuration for modifying columns safely\n */\nexport interface ModifyColumnPatternConfig {\n  tableName: string;\n  columnName: string;\n  newColumnType: string;\n  newNullable?: boolean;\n  newDefaultValue?: string | number | boolean;\n  validateDataCompatibility: boolean;\n  createBackup: boolean;\n  timeoutMs?: number;\n}\n\n/**\n * Safe column modification pattern result\n */\nexport interface ModifyColumnPatternResult {\n  steps: SafeModifyStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeModifyStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  compatibilityIssues: string[];\n}\n\n/**\n * Individual step in safe column modification\n */\nexport interface SafeModifyStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  isDestructive: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n}\n\n/**\n * Data type compatibility result\n */\nexport interface DataTypeCompatibility {\n  isCompatible: boolean;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  potentialDataLoss: boolean;\n  issues: string[];\n  recommendations: string[];\n}\n\n/**\n * Safe Column Modification Pattern\n * Implements the safest way to modify column types and properties\n */\nexport class ModifyColumnPattern {\n  /**\n   * Generate safe column modification steps\n   */\n  public generateSafeSteps(config: ModifyColumnPatternConfig): ModifyColumnPatternResult {\n    const steps: SafeModifyStep[] = [];\n    const rollbackSteps: SafeModifyStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n    const compatibilityIssues: string[] = [];\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    // Check data type compatibility\n    if (config.validateDataCompatibility) {\n      const compatibility = this.checkDataTypeCompatibility(config);\n      compatibilityIssues.push(...compatibility.issues);\n      \n      if (!compatibility.isCompatible) {\n        warnings.push(...compatibility.recommendations);\n      }\n    }\n\n    // Generate appropriate steps based on risk and backup preference\n    if (config.createBackup) {\n      this.generateBackupAndModifySteps(config, steps, rollbackSteps, warnings);\n    } else if (riskLevel === 'CRITICAL') {\n      this.generateBlockedSteps(config, steps, warnings);\n    } else {\n      this.generateDirectModifySteps(config, steps, rollbackSteps, warnings);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(), // Reverse for proper rollback order\n      preflightChecks,\n      warnings,\n      compatibilityIssues\n    };\n  }\n\n  /**\n   * Assess risk level for column modification\n   */\n  private assessRiskLevel(config: ModifyColumnPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    const compatibility = this.checkDataTypeCompatibility(config);\n    \n    if (compatibility.potentialDataLoss && !config.createBackup) {\n      return 'CRITICAL'; // Potential data loss without backup\n    }\n    if (compatibility.riskLevel === 'CRITICAL') {\n      return 'CRITICAL';\n    }\n    if (compatibility.riskLevel === 'HIGH' || compatibility.potentialDataLoss) {\n      return 'HIGH';\n    }\n    if (compatibility.riskLevel === 'MEDIUM') {\n      return 'MEDIUM';\n    }\n    return 'LOW';\n  }\n\n  /**\n   * Add preflight checks for the operation\n   */\n  private addPreflightChecks(config: ModifyColumnPatternConfig, checks: string[]): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify column '${config.columnName}' exists in table '${config.tableName}'`,\n      `Check current column definition and constraints`,\n      `Verify new column type '${config.newColumnType}' is valid`,\n      `Check if column '${config.columnName}' is part of any indexes`,\n      `Check if column '${config.columnName}' is part of any constraints`,\n      `Check if column '${config.columnName}' is referenced by foreign keys`,\n      `Verify database has sufficient storage space`,\n      `Check for active long-running transactions`,\n      `Verify table is not currently locked`\n    );\n\n    if (config.validateDataCompatibility) {\n      checks.push(\n        `Validate data compatibility between current and new column types`,\n        `Check for potential data truncation or loss`,\n        `Verify all existing values can be converted to new type`\n      );\n    }\n\n    if (config.createBackup) {\n      checks.push(\n        `Verify permissions to create backup table`,\n        `Check available disk space for backup`\n      );\n    }\n  }\n\n  /**\n   * Check data type compatibility\n   */\n  private checkDataTypeCompatibility(config: ModifyColumnPatternConfig): DataTypeCompatibility {\n    const result: DataTypeCompatibility = {\n      isCompatible: true,\n      riskLevel: 'LOW',\n      potentialDataLoss: false,\n      issues: [],\n      recommendations: []\n    };\n\n    const newType = config.newColumnType.toLowerCase();\n\n    // Check for potentially problematic conversions\n    if (newType.includes('varchar') && newType.includes('(')) {\n      const lengthMatch = newType.match(/varchar\\((\\d+)\\)/);\n      if (lengthMatch) {\n        const newLength = parseInt(lengthMatch[1]);\n        if (newLength < 255) { // Arbitrary threshold\n          result.issues.push(`Reducing VARCHAR length to ${newLength} may cause data truncation`);\n          result.potentialDataLoss = true;\n          result.riskLevel = 'HIGH';\n        }\n      }\n    }\n\n    // Check for type category changes\n    const typeConversions = [\n      { from: ['text', 'varchar', 'char'], to: ['int', 'bigint', 'decimal', 'numeric'], risk: 'CRITICAL' as const },\n      { from: ['int', 'bigint'], to: ['varchar', 'text'], risk: 'MEDIUM' as const },\n      { from: ['decimal', 'numeric'], to: ['int', 'bigint'], risk: 'HIGH' as const },\n      { from: ['timestamp', 'datetime'], to: ['date'], risk: 'HIGH' as const },\n      { from: ['json', 'jsonb'], to: ['text', 'varchar'], risk: 'MEDIUM' as const }\n    ];\n\n    for (const conversion of typeConversions) {\n      if (conversion.to.some(type => newType.includes(type))) {\n        result.issues.push(`Converting to ${config.newColumnType} may require data validation`);\n        result.riskLevel = conversion.risk;\n        \n        if (conversion.risk === 'CRITICAL' || conversion.risk === 'HIGH') {\n          result.potentialDataLoss = true;\n          result.isCompatible = false;\n        }\n      }\n    }\n\n    // Check for nullable changes\n    if (config.newNullable === false) {\n      result.issues.push('Making column NOT NULL may fail if existing NULL values exist');\n      result.riskLevel = 'HIGH';\n    }\n\n    // Add recommendations based on issues\n    if (result.potentialDataLoss) {\n      result.recommendations.push(\n        'Create a backup before proceeding',\n        'Test the conversion on a copy of the data first',\n        'Consider using a temporary column approach'\n      );\n    }\n\n    if (result.riskLevel === 'CRITICAL') {\n      result.recommendations.push(\n        'Manual data validation required before conversion',\n        'Consider data migration script instead of direct type change'\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Generate steps with backup creation (safest approach)\n   */\n  private generateBackupAndModifySteps(\n    config: ModifyColumnPatternConfig,\n    steps: SafeModifyStep[],\n    rollbackSteps: SafeModifyStep[],\n    warnings: string[]\n  ): void {\n    const backupTableName = `${config.tableName}_backup_${Date.now()}`;\n\n    warnings.push(\n      'Creating backup table before modifying column',\n      `Backup will be stored in table: ${backupTableName}`,\n      'This operation will require additional storage space'\n    );\n\n    // Step 1: Create backup table\n    steps.push({\n      id: 'create-backup-table',\n      description: `Create backup table ${backupTableName}`,\n      sql: `CREATE TABLE ${backupTableName} AS SELECT * FROM ${config.tableName};`,\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      isDestructive: false,\n      validationQuery: `SELECT COUNT(*) FROM ${backupTableName};`,\n      expectedResult: 'row_count > 0'\n    });\n\n    rollbackSteps.push({\n      id: 'cleanup-backup-table',\n      description: `Remove backup table ${backupTableName}`,\n      sql: `DROP TABLE IF EXISTS ${backupTableName};`,\n      estimatedDurationMs: 1000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      isDestructive: true\n    });\n\n    // Step 2: Validate data compatibility\n    if (config.validateDataCompatibility) {\n      steps.push({\n        id: 'validate-data-compatibility',\n        description: `Validate existing data compatibility with new type ${config.newColumnType}`,\n        sql: `-- Data validation queries will be generated based on type conversion`,\n        estimatedDurationMs: 3000,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        isDestructive: false,\n        validationQuery: `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.columnName} IS NOT NULL;`,\n        expectedResult: 'validation_passed'\n      });\n    }\n\n    // Step 3: Modify the column\n    steps.push({\n      id: 'modify-column',\n      description: `Modify column ${config.columnName} to type ${config.newColumnType}`,\n      sql: this.generateModifyColumnSql(config),\n      estimatedDurationMs: 15000,\n      canRollback: false, // Column modification is not easily reversible\n      requiresMaintenanceWindow: true,\n      isDestructive: true,\n      validationQuery: `SELECT data_type FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: config.newColumnType.toUpperCase()\n    });\n\n    // Add rollback from backup (complex operation)\n    rollbackSteps.push({\n      id: 'restore-from-backup',\n      description: `Restore table ${config.tableName} from backup ${backupTableName}`,\n      sql: `-- MANUAL PROCESS: Compare schemas and restore data as needed from ${backupTableName}`,\n      estimatedDurationMs: 30000,\n      canRollback: false,\n      requiresMaintenanceWindow: true,\n      isDestructive: true\n    });\n  }\n\n  /**\n   * Generate steps for direct modification (higher risk)\n   */\n  private generateDirectModifySteps(\n    config: ModifyColumnPatternConfig,\n    steps: SafeModifyStep[],\n    rollbackSteps: SafeModifyStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Performing direct column modification without backup',\n      'This operation cannot be easily rolled back',\n      'Ensure data compatibility has been verified'\n    );\n\n    // Step 1: Validate data compatibility (if requested)\n    if (config.validateDataCompatibility) {\n      steps.push({\n        id: 'validate-data-compatibility',\n        description: `Validate existing data compatibility with new type ${config.newColumnType}`,\n        sql: `-- Data validation queries will be generated based on type conversion`,\n        estimatedDurationMs: 3000,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        isDestructive: false,\n        validationQuery: `SELECT COUNT(*) FROM ${config.tableName} WHERE ${config.columnName} IS NOT NULL;`,\n        expectedResult: 'validation_passed'\n      });\n    }\n\n    // Step 2: Modify the column\n    steps.push({\n      id: 'modify-column',\n      description: `Modify column ${config.columnName} to type ${config.newColumnType}`,\n      sql: this.generateModifyColumnSql(config),\n      estimatedDurationMs: 15000,\n      canRollback: false, // Column modification is not easily reversible\n      requiresMaintenanceWindow: true,\n      isDestructive: true,\n      validationQuery: `SELECT data_type FROM information_schema.columns WHERE table_name = '${config.tableName}' AND column_name = '${config.columnName}';`,\n      expectedResult: config.newColumnType.toUpperCase()\n    });\n\n    // No easy rollback for direct modification\n    rollbackSteps.push({\n      id: 'no-rollback-available',\n      description: 'No automatic rollback available for column type modification',\n      sql: '-- NO ROLLBACK: Column type changed and cannot be automatically reverted',\n      estimatedDurationMs: 0,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      isDestructive: false\n    });\n  }\n\n  /**\n   * Generate blocked steps for critical risk operations\n   */\n  private generateBlockedSteps(\n    config: ModifyColumnPatternConfig,\n    steps: SafeModifyStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Operation blocked due to critical risk level',\n      'Potential data loss detected without backup',\n      'Create backup or validate data compatibility before proceeding'\n    );\n\n    steps.push({\n      id: 'blocked-operation',\n      description: 'Operation blocked - critical risk detected',\n      sql: '-- BLOCKED: Enable backup creation or fix compatibility issues to proceed',\n      estimatedDurationMs: 0,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      isDestructive: false\n    });\n  }\n\n  /**\n   * Generate database-specific MODIFY COLUMN SQL\n   */\n  private generateModifyColumnSql(config: ModifyColumnPatternConfig): string {\n    let sql = `ALTER TABLE ${config.tableName} MODIFY COLUMN ${config.columnName} ${config.newColumnType}`;\n\n    // Add nullable constraint\n    if (config.newNullable !== undefined) {\n      sql += config.newNullable ? '' : ' NOT NULL';\n    }\n\n    // Add default value\n    if (config.newDefaultValue !== undefined) {\n      const defaultValue = typeof config.newDefaultValue === 'string' \n        ? `'${config.newDefaultValue}'` \n        : config.newDefaultValue;\n      sql += ` DEFAULT ${defaultValue}`;\n    }\n\n    return sql + ';';\n  }\n\n  /**\n   * Generate database-specific MODIFY COLUMN SQL for different databases\n   */\n  public generateDatabaseSpecificSql(\n    config: ModifyColumnPatternConfig,\n    database: 'postgresql' | 'mysql' | 'sqlite'\n  ): string {\n    switch (database) {\n      case 'postgresql':\n        // PostgreSQL requires separate ALTER statements for different changes\n        const statements: string[] = [];\n        statements.push(`ALTER TABLE ${config.tableName} ALTER COLUMN ${config.columnName} TYPE ${config.newColumnType};`);\n        \n        if (config.newNullable !== undefined) {\n          statements.push(`ALTER TABLE ${config.tableName} ALTER COLUMN ${config.columnName} ${config.newNullable ? 'DROP NOT NULL' : 'SET NOT NULL'};`);\n        }\n        \n        if (config.newDefaultValue !== undefined) {\n          const defaultValue = typeof config.newDefaultValue === 'string' \n            ? `'${config.newDefaultValue}'` \n            : config.newDefaultValue;\n          statements.push(`ALTER TABLE ${config.tableName} ALTER COLUMN ${config.columnName} SET DEFAULT ${defaultValue};`);\n        }\n        \n        return statements.join('\\n');\n\n      case 'mysql':\n        return this.generateModifyColumnSql(config);\n\n      case 'sqlite':\n        return '-- SQLite requires table recreation for column modification - use backup/restore approach';\n\n      default:\n        throw new Error(`Unsupported database: ${database}`);\n    }\n  }\n\n  /**\n   * Generate data validation queries\n   */\n  public generateDataValidationQueries(config: ModifyColumnPatternConfig): string[] {\n    const queries: string[] = [];\n    const newType = config.newColumnType.toLowerCase();\n\n    // Check for NULL values if making column NOT NULL\n    if (config.newNullable === false) {\n      queries.push(`SELECT COUNT(*) as null_count FROM ${config.tableName} WHERE ${config.columnName} IS NULL;`);\n    }\n\n    // Check for data truncation in VARCHAR fields\n    if (newType.includes('varchar')) {\n      const lengthMatch = newType.match(/varchar\\((\\d+)\\)/);\n      if (lengthMatch) {\n        const maxLength = lengthMatch[1];\n        queries.push(`SELECT COUNT(*) as oversized_values FROM ${config.tableName} WHERE LENGTH(${config.columnName}) > ${maxLength};`);\n      }\n    }\n\n    // Check for numeric conversion issues\n    if (newType.includes('int') || newType.includes('decimal') || newType.includes('numeric')) {\n      queries.push(`SELECT COUNT(*) as non_numeric FROM ${config.tableName} WHERE ${config.columnName} IS NOT NULL AND ${config.columnName} NOT REGEXP '^[0-9.-]+$';`);\n    }\n\n    // Check for date/timestamp conversion issues\n    if (newType.includes('date') || newType.includes('timestamp')) {\n      queries.push(`SELECT COUNT(*) as invalid_dates FROM ${config.tableName} WHERE ${config.columnName} IS NOT NULL AND STR_TO_DATE(${config.columnName}, '%Y-%m-%d') IS NULL;`);\n    }\n\n    return queries;\n  }\n\n  /**\n   * Generate performance impact estimation\n   */\n  public estimatePerformanceImpact(config: ModifyColumnPatternConfig, tableRowCount: number): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    const baseTime = 10000; // 10 second base time for column modification\n    const rowProcessingTime = tableRowCount * 0.5; // 0.5ms per row for type conversion\n    const backupTime = config.createBackup ? tableRowCount * 0.2 : 0; // 0.2ms per row for backup\n    const validationTime = config.validateDataCompatibility ? tableRowCount * 0.1 : 0; // 0.1ms per row for validation\n    \n    const estimatedDurationMs = baseTime + rowProcessingTime + backupTime + validationTime;\n    const memoryUsageMB = Math.max(20, tableRowCount * 0.002); // Minimum 20MB, more for type conversion\n    const diskSpaceRequiredMB = config.createBackup ? (tableRowCount * 200) / (1024 * 1024) : 0; // Full table backup\n    const recommendedMaintenanceWindow = true; // Column modification always requires maintenance window\n\n    return {\n      estimatedDurationMs,\n      memoryUsageMB,\n      diskSpaceRequiredMB,\n      recommendedMaintenanceWindow\n    };\n  }\n\n  /**\n   * Validate configuration before execution\n   */\n  public validateConfig(config: ModifyColumnPatternConfig): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!config.tableName) {\n      errors.push('Table name is required');\n    }\n\n    if (!config.columnName) {\n      errors.push('Column name is required');\n    }\n\n    if (!config.newColumnType) {\n      errors.push('New column type is required');\n    }\n\n    // Validate column type format\n    const validTypes = ['VARCHAR', 'TEXT', 'INT', 'BIGINT', 'DECIMAL', 'NUMERIC', 'DATE', 'TIMESTAMP', 'BOOLEAN', 'JSON'];\n    const hasValidType = validTypes.some(type => config.newColumnType.toUpperCase().includes(type));\n    \n    if (!hasValidType) {\n      errors.push('Invalid column type specified');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n} ","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for adding constraints safely\n */\nexport interface AddConstraintPatternConfig {\n  tableName: string;\n  constraintName?: string;\n  constraintType: 'CHECK' | 'PRIMARY_KEY';\n  // For CHECK constraints\n  checkExpression?: string;\n  validateExistingData?: boolean;\n  // For PRIMARY KEY constraints  \n  columnNames?: string[];\n  replaceExisting?: boolean;\n  createUniqueIndex?: boolean;\n  batchSize?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Safe constraint addition pattern result\n */\nexport interface AddConstraintPatternResult {\n  steps: SafeAddConstraintStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeAddConstraintStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  violationCount?: number;\n}\n\n/**\n * Individual step in safe constraint addition\n */\nexport interface SafeAddConstraintStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n/**\n * Safe Add Constraint Pattern\n * Implements the safest way to add various constraint types\n */\nexport class AddConstraintPattern {\n  /**\n   * Generate safe constraint addition steps\n   */\n  public generateSafeSteps(config: AddConstraintPatternConfig): AddConstraintPatternResult {\n    const steps: SafeAddConstraintStep[] = [];\n    const rollbackSteps: SafeAddConstraintStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Generate constraint name if not provided\n    const constraintName = this.generateConstraintName(config);\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, constraintName, preflightChecks);\n\n    // Generate steps based on constraint type\n    if (config.constraintType === 'CHECK') {\n      this.generateCheckConstraintSteps(config, constraintName, steps, rollbackSteps, warnings);\n    } else if (config.constraintType === 'PRIMARY_KEY') {\n      this.generatePrimaryKeySteps(config, constraintName, steps, rollbackSteps, warnings);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Generate appropriate constraint name\n   */\n  private generateConstraintName(config: AddConstraintPatternConfig): string {\n    if (config.constraintName) {\n      return config.constraintName;\n    }\n\n    if (config.constraintType === 'CHECK') {\n      return `chk_${config.tableName}_${Date.now()}`;\n    } else if (config.constraintType === 'PRIMARY_KEY') {\n      const columnPart = config.columnNames?.join('_') || 'pk';\n      return `pk_${config.tableName}_${columnPart}`;\n    }\n\n    return `constraint_${config.tableName}_${Date.now()}`;\n  }\n\n  /**\n   * Assess risk level for constraint addition\n   */\n  private assessRiskLevel(config: AddConstraintPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.constraintType === 'PRIMARY_KEY' && config.replaceExisting) {\n      return 'CRITICAL'; // Dropping existing PK is very risky\n    }\n    if (config.constraintType === 'CHECK' && !config.validateExistingData) {\n      return 'HIGH'; // May fail if existing data violates constraint\n    }\n    if (config.constraintType === 'PRIMARY_KEY') {\n      return 'HIGH'; // PK changes are always high risk\n    }\n    return 'MEDIUM'; // CHECK constraints are generally medium risk\n  }\n\n  /**\n   * Add preflight checks for constraint addition\n   */\n  private addPreflightChecks(\n    config: AddConstraintPatternConfig,\n    constraintName: string,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Check if constraint '${constraintName}' already exists`,\n      `Verify table is not currently locked`,\n      `Check for active long-running transactions`\n    );\n\n    if (config.constraintType === 'CHECK') {\n      checks.push(\n        `Validate CHECK expression syntax: ${config.checkExpression}`,\n        `Test CHECK expression against existing data`\n      );\n    } else if (config.constraintType === 'PRIMARY_KEY') {\n      checks.push(\n        `Verify all primary key columns exist: ${config.columnNames?.join(', ')}`,\n        `Check for NULL values in primary key columns`,\n        `Check for duplicate values in primary key columns`\n      );\n      \n      if (config.replaceExisting) {\n        checks.push(\n          `Identify existing primary key constraint`,\n          `Verify impact of dropping existing primary key`\n        );\n      }\n    }\n  }\n\n  /**\n   * Generate CHECK constraint addition steps\n   */\n  private generateCheckConstraintSteps(\n    config: AddConstraintPatternConfig,\n    constraintName: string,\n    steps: SafeAddConstraintStep[],\n    rollbackSteps: SafeAddConstraintStep[],\n    warnings: string[]\n  ): void {\n    if (!config.checkExpression) {\n      throw new Error('CHECK expression is required for CHECK constraints');\n    }\n\n    // Step 1: Validate existing data against the constraint\n    if (config.validateExistingData !== false) {\n      steps.push({\n        id: 'validate-existing-data',\n        description: `Validate existing data against CHECK constraint`,\n        sql: this.generateCheckValidationQuery(config),\n        estimatedDurationMs: 8000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW',\n        validationQuery: this.generateCheckValidationQuery(config),\n        expectedResult: 0\n      });\n\n      warnings.push(\n        'Existing data will be validated against the CHECK constraint',\n        'Operation will fail if any existing rows violate the constraint'\n      );\n    } else {\n      warnings.push(\n        'CRITICAL: Existing data validation is disabled',\n        'Constraint addition may fail if existing data violates the constraint',\n        'Consider enabling validation to avoid runtime failures'\n      );\n    }\n\n    // Step 2: Add the CHECK constraint\n    steps.push({\n      id: 'add-check-constraint',\n      description: `Add CHECK constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} ADD CONSTRAINT ${constraintName} CHECK (${config.checkExpression});`,\n      estimatedDurationMs: 3000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM',\n      validationQuery: this.generateConstraintValidationQuery(config.tableName, constraintName, 'CHECK'),\n      expectedResult: constraintName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-check-constraint',\n      description: `Drop CHECK constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP CONSTRAINT IF EXISTS ${constraintName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n  }\n\n  /**\n   * Generate PRIMARY KEY constraint addition steps\n   */\n  private generatePrimaryKeySteps(\n    config: AddConstraintPatternConfig,\n    constraintName: string,\n    steps: SafeAddConstraintStep[],\n    rollbackSteps: SafeAddConstraintStep[],\n    warnings: string[]\n  ): void {\n    if (!config.columnNames || config.columnNames.length === 0) {\n      throw new Error('Column names are required for PRIMARY KEY constraints');\n    }\n\n    const columnList = config.columnNames.join(', ');\n\n    // Step 1: Validate primary key requirements\n    steps.push({\n      id: 'validate-pk-requirements',\n      description: `Validate primary key requirements for columns: ${columnList}`,\n      sql: this.generatePrimaryKeyValidationQuery(config),\n      estimatedDurationMs: 10000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM',\n      validationQuery: this.generatePrimaryKeyValidationQuery(config),\n      expectedResult: 0\n    });\n\n    // Step 2: Handle existing primary key if replacing\n    if (config.replaceExisting) {\n      warnings.push(\n        'CRITICAL: Existing primary key will be dropped',\n        'This may affect foreign key relationships',\n        'Ensure no foreign keys reference the current primary key',\n        'Application code may be affected by primary key changes'\n      );\n\n      steps.push({\n        id: 'backup-existing-pk',\n        description: 'Backup information about existing primary key',\n        sql: this.generatePrimaryKeyBackupQuery(config.tableName),\n        estimatedDurationMs: 2000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW'\n      });\n\n      steps.push({\n        id: 'drop-existing-pk',\n        description: 'Drop existing primary key constraint',\n        sql: this.generateDropPrimaryKeySQL(config.tableName),\n        estimatedDurationMs: 5000,\n        canRollback: false, // Cannot easily rollback PK drops\n        requiresMaintenanceWindow: true,\n        riskLevel: 'CRITICAL'\n      });\n    }\n\n    // Step 3: Create unique index first (for better performance)\n    if (config.createUniqueIndex !== false) {\n      const indexName = `idx_${constraintName}_unique`;\n      \n      steps.push({\n        id: 'create-unique-index',\n        description: `Create unique index for primary key`,\n        sql: `CREATE UNIQUE INDEX ${indexName} ON ${config.tableName} (${columnList});`,\n        estimatedDurationMs: 15000,\n        canRollback: true,\n        requiresMaintenanceWindow: true,\n        riskLevel: 'MEDIUM'\n      });\n\n      rollbackSteps.push({\n        id: 'rollback-unique-index',\n        description: `Drop unique index ${indexName}`,\n        sql: `DROP INDEX IF EXISTS ${indexName};`,\n        estimatedDurationMs: 2000,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW'\n      });\n    }\n\n    // Step 4: Add the primary key constraint\n    steps.push({\n      id: 'add-primary-key',\n      description: `Add primary key constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} ADD CONSTRAINT ${constraintName} PRIMARY KEY (${columnList});`,\n      estimatedDurationMs: 8000,\n      canRollback: true,\n      requiresMaintenanceWindow: true,\n      riskLevel: 'HIGH',\n      validationQuery: this.generateConstraintValidationQuery(config.tableName, constraintName, 'PRIMARY KEY'),\n      expectedResult: constraintName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-primary-key',\n      description: `Drop primary key constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP CONSTRAINT IF EXISTS ${constraintName};`,\n      estimatedDurationMs: 3000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM'\n    });\n\n    // Add primary key specific warnings\n    warnings.push(\n      'Primary key changes require maintenance window',\n      'Ensure all primary key columns are NOT NULL',\n      'Primary key addition will create an implicit unique index'\n    );\n  }\n\n  /**\n   * Generate CHECK constraint validation query\n   */\n  private generateCheckValidationQuery(config: AddConstraintPatternConfig): string {\n    return `\n      SELECT COUNT(*) as violation_count\n      FROM ${config.tableName}\n      WHERE NOT (${config.checkExpression});\n    `.trim();\n  }\n\n  /**\n   * Generate primary key validation query\n   */\n  private generatePrimaryKeyValidationQuery(config: AddConstraintPatternConfig): string {\n    const columnList = config.columnNames!.join(', ');\n    const nullChecks = config.columnNames!.map(col => `${col} IS NULL`).join(' OR ');\n    \n    return `\n      SELECT \n        (SELECT COUNT(*) FROM ${config.tableName} WHERE ${nullChecks}) as null_count,\n        (SELECT COUNT(*) - COUNT(DISTINCT ${columnList}) FROM ${config.tableName}) as duplicate_count;\n    `.trim();\n  }\n\n  /**\n   * Generate primary key backup query\n   */\n  private generatePrimaryKeyBackupQuery(tableName: string): string {\n    return `\n      SELECT constraint_name, column_name\n      FROM information_schema.key_column_usage\n      WHERE table_name = '${tableName}'\n        AND constraint_name IN (\n          SELECT constraint_name\n          FROM information_schema.table_constraints\n          WHERE table_name = '${tableName}'\n            AND constraint_type = 'PRIMARY KEY'\n        );\n    `.trim();\n  }\n\n  /**\n   * Generate drop primary key SQL\n   */\n  private generateDropPrimaryKeySQL(tableName: string): string {\n    // This is database-specific; this is a generic version\n    return `\n      ALTER TABLE ${tableName} DROP CONSTRAINT (\n        SELECT constraint_name\n        FROM information_schema.table_constraints\n        WHERE table_name = '${tableName}'\n          AND constraint_type = 'PRIMARY KEY'\n      );\n    `.trim();\n  }\n\n  /**\n   * Generate constraint validation query\n   */\n  private generateConstraintValidationQuery(\n    tableName: string, \n    constraintName: string, \n    constraintType: string\n  ): string {\n    return `\n      SELECT constraint_name\n      FROM information_schema.table_constraints\n      WHERE table_name = '${tableName}'\n        AND constraint_name = '${constraintName}'\n        AND constraint_type = '${constraintType}';\n    `.trim();\n  }\n\n  /**\n   * Generate validation queries for the constraint\n   */\n  public generateValidationQueries(config: AddConstraintPatternConfig): string[] {\n    const constraintName = this.generateConstraintName(config);\n    const constraintType = config.constraintType === 'PRIMARY_KEY' ? 'PRIMARY KEY' : 'CHECK';\n    \n    const queries = [\n      this.generateConstraintValidationQuery(config.tableName, constraintName, constraintType),\n      `SELECT COUNT(*) FROM ${config.tableName};` // Verify no data loss\n    ];\n\n    if (config.constraintType === 'CHECK' && config.checkExpression) {\n      queries.push(this.generateCheckValidationQuery(config));\n    } else if (config.constraintType === 'PRIMARY_KEY' && config.columnNames) {\n      queries.push(this.generatePrimaryKeyValidationQuery(config));\n    }\n\n    return queries;\n  }\n\n  /**\n   * Estimate performance impact of constraint addition\n   */\n  public estimatePerformanceImpact(\n    config: AddConstraintPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    // Base calculation factors\n    const rowsPerSecond = 12000; // Constraint validation is moderately fast\n    const memoryPerRow = 0.0015; // 1.5KB per row estimate\n    \n    // Calculate duration based on constraint type and row count\n    let validationDuration = Math.max(1000, (tableRowCount / rowsPerSecond) * 1000);\n    let constraintAdditionDuration = 3000;\n    \n    if (config.constraintType === 'PRIMARY_KEY') {\n      constraintAdditionDuration = Math.max(8000, (tableRowCount / rowsPerSecond) * 2000);\n      if (config.createUniqueIndex !== false) {\n        constraintAdditionDuration += Math.max(15000, (tableRowCount / rowsPerSecond) * 1500);\n      }\n    }\n    \n    let totalDuration = validationDuration + constraintAdditionDuration;\n    \n    // Additional overhead for primary key replacement\n    if (config.constraintType === 'PRIMARY_KEY' && config.replaceExisting) {\n      totalDuration += 10000; // Additional overhead for PK replacement\n    }\n    \n    // Memory usage estimation\n    const memoryUsageMB = Math.max(30, tableRowCount * memoryPerRow);\n    \n    // Disk space estimation (for indexes and temporary data)\n    const avgRowSize = 100; // bytes\n    let diskSpaceRequiredMB = 5; // Minimum overhead\n    \n    if (config.constraintType === 'PRIMARY_KEY') {\n      const pkColumns = config.columnNames?.length || 1;\n      diskSpaceRequiredMB = Math.max(10, (tableRowCount * avgRowSize * pkColumns) / (1024 * 1024));\n    }\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = \n      tableRowCount > 100000 || // Large tables\n      config.constraintType === 'PRIMARY_KEY' || // PK operations\n      (config.constraintType === 'PRIMARY_KEY' && Boolean(config.replaceExisting)) || // PK replacement\n      config.validateExistingData === false; // Risky operations\n    \n    return {\n      estimatedDurationMs: Math.round(totalDuration),\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB: Math.round(diskSpaceRequiredMB),\n      recommendedMaintenanceWindow\n    };\n  }\n}","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for dropping constraints safely\n */\nexport interface DropConstraintPatternConfig {\n  tableName: string;\n  constraintName: string;\n  constraintType: 'UNIQUE' | 'FOREIGN_KEY' | 'CHECK' | 'PRIMARY_KEY';\n  createBackup?: boolean;\n  cascadeDelete?: boolean;\n  validateImpact?: boolean;\n  batchSize?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Safe constraint drop pattern result\n */\nexport interface DropConstraintPatternResult {\n  steps: SafeDropConstraintStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeDropConstraintStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  dependentObjects?: string[];\n}\n\n/**\n * Individual step in safe constraint drop\n */\nexport interface SafeDropConstraintStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n/**\n * Safe Drop Constraint Pattern\n * Implements the safest way to drop various constraint types\n */\nexport class DropConstraintPattern {\n  /**\n   * Generate safe constraint drop steps\n   */\n  public generateSafeSteps(config: DropConstraintPatternConfig): DropConstraintPatternResult {\n    const steps: SafeDropConstraintStep[] = [];\n    const rollbackSteps: SafeDropConstraintStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    // Generate steps based on configuration\n    this.generateDropSteps(config, steps, rollbackSteps, warnings);\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Assess risk level for constraint drop\n   */\n  private assessRiskLevel(config: DropConstraintPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.constraintType === 'PRIMARY_KEY') {\n      return 'CRITICAL'; // Dropping PK is extremely risky\n    }\n    if (config.constraintType === 'FOREIGN_KEY' && config.cascadeDelete) {\n      return 'CRITICAL'; // Cascading FK drops can delete data\n    }\n    if (config.constraintType === 'FOREIGN_KEY') {\n      return 'HIGH'; // FK drops affect referential integrity\n    }\n    if (config.constraintType === 'UNIQUE') {\n      return 'MEDIUM'; // Unique constraint drops allow duplicates\n    }\n    return 'LOW'; // CHECK constraints are generally safe to drop\n  }\n\n  /**\n   * Add preflight checks for constraint drop\n   */\n  private addPreflightChecks(config: DropConstraintPatternConfig, checks: string[]): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify constraint '${config.constraintName}' exists`,\n      `Check constraint type matches expected type: ${config.constraintType}`,\n      `Verify table is not currently locked`,\n      `Check for active transactions that might be affected`\n    );\n\n    if (config.constraintType === 'FOREIGN_KEY') {\n      checks.push(\n        `Identify dependent foreign key relationships`,\n        `Check for potential orphan records after constraint drop`,\n        `Verify impact on referential integrity`\n      );\n    }\n\n    if (config.constraintType === 'PRIMARY_KEY') {\n      checks.push(\n        `CRITICAL: Identify all foreign keys referencing this primary key`,\n        `Check for applications depending on primary key constraint`,\n        `Verify no replication or clustering dependencies on primary key`\n      );\n    }\n\n    if (config.constraintType === 'UNIQUE') {\n      checks.push(\n        `Check for applications depending on uniqueness guarantee`,\n        `Identify indexes that might be dropped with the constraint`\n      );\n    }\n\n    if (config.validateImpact !== false) {\n      checks.push(\n        `Analyze potential impact on data integrity`,\n        `Check for dependent database objects (views, procedures, etc.)`\n      );\n    }\n  }\n\n  /**\n   * Generate constraint drop steps\n   */\n  private generateDropSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    // Step 1: Create backup of constraint definition if requested\n    if (config.createBackup !== false) {\n      steps.push({\n        id: 'backup-constraint-definition',\n        description: `Backup constraint definition for ${config.constraintName}`,\n        sql: this.generateConstraintBackupQuery(config),\n        estimatedDurationMs: 3000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW'\n      });\n    }\n\n    // Step 2: Analyze constraint dependencies\n    if (config.validateImpact !== false) {\n      steps.push({\n        id: 'analyze-dependencies',\n        description: `Analyze dependencies for constraint ${config.constraintName}`,\n        sql: this.generateDependencyAnalysisQuery(config),\n        estimatedDurationMs: 5000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW'\n      });\n    }\n\n    // Step 3: Handle constraint-specific preparations\n    this.addConstraintSpecificSteps(config, steps, rollbackSteps, warnings);\n\n    // Step 4: Drop the constraint\n    const dropSQL = this.generateDropConstraintSQL(config);\n    const dropRisk = this.getDropRiskLevel(config);\n    \n    steps.push({\n      id: 'drop-constraint',\n      description: `Drop ${config.constraintType} constraint ${config.constraintName}`,\n      sql: dropSQL,\n      estimatedDurationMs: this.estimateDropDuration(config),\n      canRollback: false, // Constraint drops are generally not easily reversible\n      requiresMaintenanceWindow: this.requiresMaintenanceWindow(config),\n      riskLevel: dropRisk,\n      validationQuery: this.generateDropValidationQuery(config),\n      expectedResult: 0 // Should return 0 rows if constraint is dropped\n    });\n\n    // Add rollback steps (constraint recreation)\n    this.addRollbackSteps(config, rollbackSteps);\n\n    // Add warnings based on constraint type\n    this.addConstraintSpecificWarnings(config, warnings);\n  }\n\n  /**\n   * Add constraint-specific preparation steps\n   */\n  private addConstraintSpecificSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    switch (config.constraintType) {\n      case 'PRIMARY_KEY':\n        this.addPrimaryKeyDropSteps(config, steps, rollbackSteps, warnings);\n        break;\n      case 'FOREIGN_KEY':\n        this.addForeignKeyDropSteps(config, steps, rollbackSteps, warnings);\n        break;\n      case 'UNIQUE':\n        this.addUniqueConstraintDropSteps(config, steps, rollbackSteps, warnings);\n        break;\n      case 'CHECK':\n        this.addCheckConstraintDropSteps(config, steps, rollbackSteps, warnings);\n        break;\n    }\n  }\n\n  /**\n   * Add primary key specific drop steps\n   */\n  private addPrimaryKeyDropSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'CRITICAL: Dropping primary key constraint is extremely dangerous',\n      'This will affect all foreign key relationships',\n      'Application code may fail without primary key constraint',\n      'Consider adding a new primary key before dropping the old one'\n    );\n\n    // Check for foreign key dependencies\n    steps.push({\n      id: 'check-pk-dependencies',\n      description: 'Check for foreign key dependencies on primary key',\n      sql: this.generatePrimaryKeyDependencyQuery(config),\n      estimatedDurationMs: 8000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'HIGH',\n      validationQuery: this.generatePrimaryKeyDependencyQuery(config),\n      expectedResult: 0 // Should be 0 if no dependencies\n    });\n  }\n\n  /**\n   * Add foreign key specific drop steps\n   */\n  private addForeignKeyDropSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Dropping foreign key constraint removes referential integrity protection',\n      'Applications may be able to create orphan records after constraint removal',\n      'Consider the impact on data consistency'\n    );\n\n    if (config.cascadeDelete) {\n      warnings.push(\n        'CRITICAL: CASCADE option may delete related data',\n        'Ensure you have complete backups before proceeding'\n      );\n    }\n\n    // Analyze current referential integrity\n    steps.push({\n      id: 'analyze-referential-integrity',\n      description: 'Analyze current referential integrity before FK drop',\n      sql: this.generateReferentialIntegrityQuery(config),\n      estimatedDurationMs: 12000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM'\n    });\n  }\n\n  /**\n   * Add unique constraint specific drop steps\n   */\n  private addUniqueConstraintDropSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Dropping unique constraint allows duplicate values to be inserted',\n      'Applications depending on uniqueness guarantee may fail',\n      'Associated unique index may also be dropped'\n    );\n\n    // Check for associated indexes\n    steps.push({\n      id: 'check-associated-indexes',\n      description: 'Check for indexes associated with unique constraint',\n      sql: this.generateAssociatedIndexQuery(config),\n      estimatedDurationMs: 3000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n  }\n\n  /**\n   * Add check constraint specific drop steps\n   */\n  private addCheckConstraintDropSteps(\n    config: DropConstraintPatternConfig,\n    steps: SafeDropConstraintStep[],\n    rollbackSteps: SafeDropConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Dropping check constraint removes data validation rules',\n      'Invalid data may be inserted after constraint removal'\n    );\n\n    // Get constraint definition for potential rollback\n    steps.push({\n      id: 'get-check-definition',\n      description: 'Retrieve CHECK constraint definition for rollback',\n      sql: this.generateCheckDefinitionQuery(config),\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n  }\n\n  /**\n   * Generate constraint backup query\n   */\n  private generateConstraintBackupQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT \n        constraint_name,\n        constraint_type,\n        table_name,\n        column_name,\n        referenced_table_name,\n        referenced_column_name,\n        delete_rule,\n        update_rule\n      FROM information_schema.table_constraints tc\n      LEFT JOIN information_schema.key_column_usage kcu\n        ON tc.constraint_name = kcu.constraint_name\n      LEFT JOIN information_schema.referential_constraints rc\n        ON tc.constraint_name = rc.constraint_name\n      WHERE tc.table_name = '${config.tableName}'\n        AND tc.constraint_name = '${config.constraintName}';\n    `.trim();\n  }\n\n  /**\n   * Generate dependency analysis query\n   */\n  private generateDependencyAnalysisQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT \n        'VIEW' as object_type,\n        table_name as object_name\n      FROM information_schema.views\n      WHERE view_definition LIKE '%${config.tableName}%'\n      \n      UNION ALL\n      \n      SELECT \n        'TRIGGER' as object_type,\n        trigger_name as object_name\n      FROM information_schema.triggers\n      WHERE event_object_table = '${config.tableName}'\n      \n      UNION ALL\n      \n      SELECT \n        'ROUTINE' as object_type,\n        routine_name as object_name\n      FROM information_schema.routines\n      WHERE routine_definition LIKE '%${config.tableName}%';\n    `.trim();\n  }\n\n  /**\n   * Generate drop constraint SQL\n   */\n  private generateDropConstraintSQL(config: DropConstraintPatternConfig): string {\n    let sql = `ALTER TABLE ${config.tableName} DROP CONSTRAINT ${config.constraintName}`;\n    \n    if (config.cascadeDelete && config.constraintType === 'FOREIGN_KEY') {\n      sql += ' CASCADE';\n    }\n    \n    return sql + ';';\n  }\n\n  /**\n   * Generate primary key dependency query\n   */\n  private generatePrimaryKeyDependencyQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT \n        fk.table_name as dependent_table,\n        fk.constraint_name as fk_constraint_name,\n        fk.column_name as fk_column\n      FROM information_schema.key_column_usage fk\n      JOIN information_schema.referential_constraints rc\n        ON fk.constraint_name = rc.constraint_name\n      WHERE rc.referenced_table_name = '${config.tableName}'\n        AND fk.referenced_column_name IN (\n          SELECT column_name\n          FROM information_schema.key_column_usage\n          WHERE table_name = '${config.tableName}'\n            AND constraint_name = '${config.constraintName}'\n        );\n    `.trim();\n  }\n\n  /**\n   * Generate referential integrity query\n   */\n  private generateReferentialIntegrityQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT COUNT(*) as potential_orphans\n      FROM ${config.tableName} child\n      LEFT JOIN information_schema.key_column_usage kcu\n        ON kcu.constraint_name = '${config.constraintName}'\n      WHERE child.some_column IS NOT NULL; -- This would need to be more specific\n    `.trim();\n  }\n\n  /**\n   * Generate associated index query\n   */\n  private generateAssociatedIndexQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT \n        index_name,\n        column_name,\n        non_unique\n      FROM information_schema.statistics\n      WHERE table_name = '${config.tableName}'\n        AND index_name LIKE '%${config.constraintName}%';\n    `.trim();\n  }\n\n  /**\n   * Generate check definition query\n   */\n  private generateCheckDefinitionQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT check_clause\n      FROM information_schema.check_constraints\n      WHERE constraint_name = '${config.constraintName}';\n    `.trim();\n  }\n\n  /**\n   * Generate drop validation query\n   */\n  private generateDropValidationQuery(config: DropConstraintPatternConfig): string {\n    return `\n      SELECT COUNT(*) as constraint_exists\n      FROM information_schema.table_constraints\n      WHERE table_name = '${config.tableName}'\n        AND constraint_name = '${config.constraintName}';\n    `.trim();\n  }\n\n  /**\n   * Get drop risk level\n   */\n  private getDropRiskLevel(config: DropConstraintPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    return this.assessRiskLevel(config);\n  }\n\n  /**\n   * Estimate drop duration\n   */\n  private estimateDropDuration(config: DropConstraintPatternConfig): number {\n    switch (config.constraintType) {\n      case 'PRIMARY_KEY':\n        return 10000; // PK drops are complex\n      case 'FOREIGN_KEY':\n        return 5000; // FK drops require integrity checks\n      case 'UNIQUE':\n        return 3000; // May need to drop associated index\n      case 'CHECK':\n        return 2000; // Simple constraint drops\n      default:\n        return 3000;\n    }\n  }\n\n  /**\n   * Check if maintenance window is required\n   */\n  private requiresMaintenanceWindow(config: DropConstraintPatternConfig): boolean {\n    return config.constraintType === 'PRIMARY_KEY' || \n           (config.constraintType === 'FOREIGN_KEY' && config.cascadeDelete === true);\n  }\n\n  /**\n   * Add rollback steps for constraint recreation\n   */\n  private addRollbackSteps(config: DropConstraintPatternConfig, rollbackSteps: SafeDropConstraintStep[]): void {\n    rollbackSteps.push({\n      id: 'rollback-constraint-drop',\n      description: `Recreate ${config.constraintType} constraint ${config.constraintName}`,\n      sql: `-- Rollback requires manual intervention with backed up constraint definition`,\n      estimatedDurationMs: 5000,\n      canRollback: false,\n      requiresMaintenanceWindow: true,\n      riskLevel: 'HIGH'\n    });\n  }\n\n  /**\n   * Add constraint-specific warnings\n   */\n  private addConstraintSpecificWarnings(config: DropConstraintPatternConfig, warnings: string[]): void {\n    warnings.push(\n      `Constraint drop cannot be easily rolled back`,\n      `Ensure you have backed up the constraint definition`,\n      `Consider the impact on application functionality`\n    );\n\n    if (config.constraintType === 'PRIMARY_KEY') {\n      warnings.push(\n        'Primary key drop will affect table replication',\n        'Some database tools may not work without primary key'\n      );\n    }\n  }\n\n  /**\n   * Generate validation queries for the constraint drop\n   */\n  public generateValidationQueries(config: DropConstraintPatternConfig): string[] {\n    return [\n      this.generateDropValidationQuery(config),\n      `SELECT COUNT(*) FROM ${config.tableName};`, // Verify no data loss\n      this.generateConstraintBackupQuery(config)\n    ];\n  }\n\n  /**\n   * Estimate performance impact of constraint drop\n   */\n  public estimatePerformanceImpact(\n    config: DropConstraintPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    // Base calculation factors\n    const baseDropDuration = this.estimateDropDuration(config);\n    const memoryUsageMB = Math.max(10, tableRowCount * 0.0005); // Minimal memory for drops\n    \n    // Disk space is minimal for constraint drops (just for backups)\n    const diskSpaceRequiredMB = 5; // Minimal space for constraint metadata backup\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = this.requiresMaintenanceWindow(config);\n    \n    return {\n      estimatedDurationMs: baseDropDuration,\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB,\n      recommendedMaintenanceWindow\n    };\n  }\n}","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for adding foreign key constraints safely\n */\nexport interface ForeignKeyPatternConfig {\n  tableName: string;\n  constraintName?: string;\n  columnNames: string[];\n  referencedTableName: string;\n  referencedColumnNames: string[];\n  onDelete?: 'CASCADE' | 'SET NULL' | 'RESTRICT' | 'NO ACTION';\n  onUpdate?: 'CASCADE' | 'SET NULL' | 'RESTRICT' | 'NO ACTION';\n  handleOrphans: 'fail' | 'remove' | 'mark' | 'set_null';\n  orphanHandlingStrategy?: 'backup_first' | 'direct_action';\n  deferrable?: boolean;\n  initiallyDeferred?: boolean;\n  batchSize?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Safe foreign key constraint addition pattern result\n */\nexport interface ForeignKeyPatternResult {\n  steps: SafeForeignKeyStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeForeignKeyStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  orphanCount?: number;\n}\n\n/**\n * Individual step in safe foreign key constraint addition\n */\nexport interface SafeForeignKeyStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n/**\n * Safe Foreign Key Constraint Addition Pattern\n * Implements the safest way to add foreign key constraints with orphan handling\n */\nexport class ForeignKeyPattern {\n  /**\n   * Generate safe foreign key constraint addition steps\n   */\n  public generateSafeSteps(config: ForeignKeyPatternConfig): ForeignKeyPatternResult {\n    const steps: SafeForeignKeyStep[] = [];\n    const rollbackSteps: SafeForeignKeyStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Generate constraint name if not provided\n    const constraintName = config.constraintName || \n      `fk_${config.tableName}_${config.columnNames.join('_')}_${config.referencedTableName}`;\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, constraintName, preflightChecks);\n\n    // Generate steps based on orphan handling strategy\n    this.generateConstraintSteps(config, constraintName, steps, rollbackSteps, warnings);\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Assess risk level for foreign key constraint addition\n   */\n  private assessRiskLevel(config: ForeignKeyPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.handleOrphans === 'fail') {\n      return 'CRITICAL'; // Will fail if orphan records exist\n    }\n    if (config.handleOrphans === 'remove') {\n      return 'HIGH'; // Data deletion is high risk\n    }\n    if (config.onDelete === 'CASCADE' || config.onUpdate === 'CASCADE') {\n      return 'HIGH'; // Cascading operations are risky\n    }\n    if (config.handleOrphans === 'set_null' && config.columnNames.some(col => !col.endsWith('_nullable'))) {\n      return 'MEDIUM'; // Setting non-nullable columns to null may cause issues\n    }\n    return 'LOW';\n  }\n\n  /**\n   * Add preflight checks for foreign key constraint addition\n   */\n  private addPreflightChecks(\n    config: ForeignKeyPatternConfig,\n    constraintName: string,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify referenced table '${config.referencedTableName}' exists`,\n      `Check if constraint '${constraintName}' already exists`,\n      `Verify all source columns exist: ${config.columnNames.join(', ')}`,\n      `Verify all referenced columns exist: ${config.referencedColumnNames.join(', ')}`,\n      `Check for orphan records that violate the foreign key`,\n      `Verify referenced table has appropriate indexes on referenced columns`,\n      `Check for active transactions on both tables`,\n      `Verify sufficient privileges for constraint creation`\n    );\n\n    if (config.handleOrphans === 'remove') {\n      checks.push(\n        `Backup orphan records before removal`,\n        `Verify orphan handling strategy is acceptable`\n      );\n    }\n\n    if (config.onDelete === 'CASCADE' || config.onUpdate === 'CASCADE') {\n      checks.push(\n        `WARNING: Cascading operations can affect multiple rows`,\n        `Verify cascade behavior is intended and safe`\n      );\n    }\n  }\n\n  /**\n   * Generate foreign key constraint addition steps\n   */\n  private generateConstraintSteps(\n    config: ForeignKeyPatternConfig,\n    constraintName: string,\n    steps: SafeForeignKeyStep[],\n    rollbackSteps: SafeForeignKeyStep[],\n    warnings: string[]\n  ): void {\n    // Step 1: Check for orphan records\n    steps.push({\n      id: 'check-orphans',\n      description: `Check for orphan records that would violate foreign key constraint`,\n      sql: this.generateOrphanCheckQuery(config),\n      estimatedDurationMs: 10000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      validationQuery: this.generateOrphanCheckQuery(config),\n      expectedResult: 0\n    });\n\n    // Step 2: Handle orphan records if they exist\n    if (config.handleOrphans === 'remove') {\n      this.addOrphanRemovalSteps(config, steps, rollbackSteps, warnings);\n    } else if (config.handleOrphans === 'mark') {\n      this.addOrphanMarkingSteps(config, steps, rollbackSteps, warnings);\n    } else if (config.handleOrphans === 'set_null') {\n      this.addOrphanNullificationSteps(config, steps, rollbackSteps, warnings);\n    }\n\n    // Step 3: Verify referenced table has proper index (create if needed)\n    steps.push({\n      id: 'ensure-referenced-index',\n      description: `Ensure index exists on referenced columns`,\n      sql: this.generateReferencedIndexSQL(config),\n      estimatedDurationMs: 8000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Step 4: Add the foreign key constraint\n    const constraintSQL = this.generateForeignKeyConstraintSQL(config, constraintName);\n    const constraintRisk = config.deferrable ? 'LOW' : 'MEDIUM';\n    \n    steps.push({\n      id: 'add-foreign-key-constraint',\n      description: `Add foreign key constraint ${constraintName}`,\n      sql: constraintSQL,\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: !config.deferrable,\n      riskLevel: constraintRisk,\n      validationQuery: this.generateConstraintValidationQuery(config.tableName, constraintName),\n      expectedResult: constraintName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-foreign-key-constraint',\n      description: `Drop foreign key constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP CONSTRAINT IF EXISTS ${constraintName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Add configuration-specific warnings\n    this.addWarnings(config, warnings);\n  }\n\n  /**\n   * Generate SQL to check for orphan records\n   */\n  private generateOrphanCheckQuery(config: ForeignKeyPatternConfig): string {\n    const sourceColumns = config.columnNames.join(', ');\n    const referencedColumns = config.referencedColumnNames.join(', ');\n    \n    // Build join condition\n    const joinConditions = config.columnNames.map((col, index) => \n      `child.${col} = parent.${config.referencedColumnNames[index]}`\n    ).join(' AND ');\n\n    return `\n      SELECT COUNT(*) as orphan_count\n      FROM ${config.tableName} child\n      LEFT JOIN ${config.referencedTableName} parent ON ${joinConditions}\n      WHERE parent.${config.referencedColumnNames[0]} IS NULL\n        AND child.${config.columnNames[0]} IS NOT NULL;\n    `.trim();\n  }\n\n  /**\n   * Add orphan removal steps\n   */\n  private addOrphanRemovalSteps(\n    config: ForeignKeyPatternConfig,\n    steps: SafeForeignKeyStep[],\n    rollbackSteps: SafeForeignKeyStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'DESTRUCTIVE OPERATION: Orphan record removal will permanently delete data',\n      'Ensure you have a complete backup before proceeding',\n      'Consider manual orphan resolution instead of automatic removal'\n    );\n\n    if (config.orphanHandlingStrategy === 'backup_first') {\n      // Create backup of orphan records\n      steps.push({\n        id: 'backup-orphans',\n        description: 'Create backup of orphan records',\n        sql: this.generateOrphanBackupSQL(config),\n        estimatedDurationMs: 15000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'MEDIUM'\n      });\n    }\n\n    // Remove orphan records\n    steps.push({\n      id: 'remove-orphans',\n      description: 'Remove orphan records that violate foreign key constraint',\n      sql: this.generateOrphanRemovalSQL(config),\n      estimatedDurationMs: 25000,\n      canRollback: false, // Cannot rollback data deletion\n      requiresMaintenanceWindow: true,\n      riskLevel: 'HIGH'\n    });\n  }\n\n  /**\n   * Add orphan marking steps\n   */\n  private addOrphanMarkingSteps(\n    config: ForeignKeyPatternConfig,\n    steps: SafeForeignKeyStep[],\n    rollbackSteps: SafeForeignKeyStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Orphan records will be marked but not removed',\n      'Manual intervention required to resolve orphan relationships',\n      'Constraint addition will fail until orphans are resolved'\n    );\n\n    // Add orphan marker column if it doesn't exist\n    steps.push({\n      id: 'add-orphan-marker',\n      description: 'Add column to mark orphan records',\n      sql: `ALTER TABLE ${config.tableName} ADD COLUMN IF NOT EXISTS _orphan_marker BOOLEAN DEFAULT FALSE;`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Mark orphan records\n    steps.push({\n      id: 'mark-orphans',\n      description: 'Mark orphan records for manual resolution',\n      sql: this.generateOrphanMarkingSQL(config),\n      estimatedDurationMs: 12000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n  }\n\n  /**\n   * Add orphan nullification steps\n   */\n  private addOrphanNullificationSteps(\n    config: ForeignKeyPatternConfig,\n    steps: SafeForeignKeyStep[],\n    rollbackSteps: SafeForeignKeyStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Orphan records will have foreign key columns set to NULL',\n      'Ensure foreign key columns are nullable before proceeding',\n      'This may affect application logic that depends on these values'\n    );\n\n    // Set orphan foreign keys to NULL\n    steps.push({\n      id: 'nullify-orphans',\n      description: 'Set orphan foreign key values to NULL',\n      sql: this.generateOrphanNullificationSQL(config),\n      estimatedDurationMs: 15000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM'\n    });\n  }\n\n  /**\n   * Generate referenced table index SQL\n   */\n  private generateReferencedIndexSQL(config: ForeignKeyPatternConfig): string {\n    const referencedColumns = config.referencedColumnNames.join(', ');\n    const indexName = `idx_${config.referencedTableName}_${config.referencedColumnNames.join('_')}_fk`;\n    \n    return `\n      CREATE INDEX IF NOT EXISTS ${indexName} \n      ON ${config.referencedTableName} (${referencedColumns});\n    `.trim();\n  }\n\n  /**\n   * Generate foreign key constraint SQL\n   */\n  private generateForeignKeyConstraintSQL(config: ForeignKeyPatternConfig, constraintName: string): string {\n    const sourceColumns = config.columnNames.join(', ');\n    const referencedColumns = config.referencedColumnNames.join(', ');\n    \n    let sql = `ALTER TABLE ${config.tableName} ADD CONSTRAINT ${constraintName} `;\n    sql += `FOREIGN KEY (${sourceColumns}) `;\n    sql += `REFERENCES ${config.referencedTableName} (${referencedColumns})`;\n    \n    if (config.onDelete) {\n      sql += ` ON DELETE ${config.onDelete}`;\n    }\n    \n    if (config.onUpdate) {\n      sql += ` ON UPDATE ${config.onUpdate}`;\n    }\n    \n    if (config.deferrable) {\n      sql += ` DEFERRABLE`;\n      if (config.initiallyDeferred) {\n        sql += ` INITIALLY DEFERRED`;\n      }\n    }\n    \n    return sql + ';';\n  }\n\n  /**\n   * Generate orphan backup SQL\n   */\n  private generateOrphanBackupSQL(config: ForeignKeyPatternConfig): string {\n    const backupTableName = `${config.tableName}_orphans_backup_${Date.now()}`;\n    const joinConditions = config.columnNames.map((col, index) => \n      `child.${col} = parent.${config.referencedColumnNames[index]}`\n    ).join(' AND ');\n\n    return `\n      CREATE TABLE ${backupTableName} AS\n      SELECT child.*\n      FROM ${config.tableName} child\n      LEFT JOIN ${config.referencedTableName} parent ON ${joinConditions}\n      WHERE parent.${config.referencedColumnNames[0]} IS NULL\n        AND child.${config.columnNames[0]} IS NOT NULL;\n    `.trim();\n  }\n\n  /**\n   * Generate orphan removal SQL\n   */\n  private generateOrphanRemovalSQL(config: ForeignKeyPatternConfig): string {\n    const joinConditions = config.columnNames.map((col, index) => \n      `child.${col} = parent.${config.referencedColumnNames[index]}`\n    ).join(' AND ');\n\n    return `\n      DELETE child\n      FROM ${config.tableName} child\n      LEFT JOIN ${config.referencedTableName} parent ON ${joinConditions}\n      WHERE parent.${config.referencedColumnNames[0]} IS NULL\n        AND child.${config.columnNames[0]} IS NOT NULL;\n    `.trim();\n  }\n\n  /**\n   * Generate orphan marking SQL\n   */\n  private generateOrphanMarkingSQL(config: ForeignKeyPatternConfig): string {\n    const joinConditions = config.columnNames.map((col, index) => \n      `child.${col} = parent.${config.referencedColumnNames[index]}`\n    ).join(' AND ');\n\n    return `\n      UPDATE ${config.tableName} child\n      LEFT JOIN ${config.referencedTableName} parent ON ${joinConditions}\n      SET child._orphan_marker = TRUE\n      WHERE parent.${config.referencedColumnNames[0]} IS NULL\n        AND child.${config.columnNames[0]} IS NOT NULL;\n    `.trim();\n  }\n\n  /**\n   * Generate orphan nullification SQL\n   */\n  private generateOrphanNullificationSQL(config: ForeignKeyPatternConfig): string {\n    const joinConditions = config.columnNames.map((col, index) => \n      `child.${col} = parent.${config.referencedColumnNames[index]}`\n    ).join(' AND ');\n    \n    const nullificationSets = config.columnNames.map(col => `child.${col} = NULL`).join(', ');\n\n    return `\n      UPDATE ${config.tableName} child\n      LEFT JOIN ${config.referencedTableName} parent ON ${joinConditions}\n      SET ${nullificationSets}\n      WHERE parent.${config.referencedColumnNames[0]} IS NULL\n        AND child.${config.columnNames[0]} IS NOT NULL;\n    `.trim();\n  }\n\n  /**\n   * Generate constraint validation query\n   */\n  private generateConstraintValidationQuery(tableName: string, constraintName: string): string {\n    return `\n      SELECT constraint_name\n      FROM information_schema.table_constraints\n      WHERE table_name = '${tableName}'\n        AND constraint_name = '${constraintName}'\n        AND constraint_type = 'FOREIGN KEY';\n    `.trim();\n  }\n\n  /**\n   * Add configuration-specific warnings\n   */\n  private addWarnings(config: ForeignKeyPatternConfig, warnings: string[]): void {\n    if (config.onDelete === 'CASCADE' || config.onUpdate === 'CASCADE') {\n      warnings.push('CASCADE operations can affect multiple tables and rows');\n    }\n\n    if (config.handleOrphans === 'fail') {\n      warnings.push('Operation will fail if any orphan records exist');\n    }\n\n    if (!config.deferrable) {\n      warnings.push('Non-deferrable constraints are checked immediately and may require maintenance window');\n    }\n\n    if (config.handleOrphans === 'set_null') {\n      warnings.push('Ensure foreign key columns are nullable before using set_null strategy');\n    }\n  }\n\n  /**\n   * Generate validation queries for the constraint\n   */\n  public generateValidationQueries(config: ForeignKeyPatternConfig): string[] {\n    const constraintName = config.constraintName || \n      `fk_${config.tableName}_${config.columnNames.join('_')}_${config.referencedTableName}`;\n    \n    return [\n      this.generateOrphanCheckQuery(config),\n      this.generateConstraintValidationQuery(config.tableName, constraintName),\n      `SELECT COUNT(*) FROM ${config.tableName};`, // Verify no data loss\n      `SELECT COUNT(*) FROM ${config.referencedTableName};` // Verify referenced table integrity\n    ];\n  }\n\n  /**\n   * Estimate performance impact of foreign key constraint addition\n   */\n  public estimatePerformanceImpact(\n    config: ForeignKeyPatternConfig,\n    sourceTableRowCount: number,\n    referencedTableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    // Base calculation factors\n    const rowsPerSecond = 8000; // FK validation is slower than simple operations\n    const memoryPerRow = 0.002; // 2KB per row estimate for FK operations\n    \n    // Calculate duration based on row counts and operation complexity\n    const orphanCheckDuration = Math.max(2000, (sourceTableRowCount / rowsPerSecond) * 1000);\n    const indexCreationDuration = Math.max(3000, (referencedTableRowCount / rowsPerSecond) * 1000);\n    const constraintAdditionDuration = Math.max(5000, (sourceTableRowCount / rowsPerSecond) * 2000);\n    \n    let totalDuration = orphanCheckDuration + indexCreationDuration + constraintAdditionDuration;\n    \n    // Additional overhead for orphan handling\n    if (config.handleOrphans === 'remove') {\n      totalDuration += (sourceTableRowCount / rowsPerSecond) * 3000; // Additional time for deletion\n    } else if (config.handleOrphans === 'set_null') {\n      totalDuration += (sourceTableRowCount / rowsPerSecond) * 1500; // Additional time for updates\n    }\n    \n    // Memory usage estimation (higher for FK operations due to joins)\n    const memoryUsageMB = Math.max(100, (sourceTableRowCount + referencedTableRowCount) * memoryPerRow);\n    \n    // Disk space for backup and indexes\n    const avgRowSize = 150; // bytes (higher for FK operations)\n    const diskSpaceRequiredMB = Math.max(20, \n      (sourceTableRowCount * avgRowSize * config.columnNames.length) / (1024 * 1024)\n    );\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = \n      sourceTableRowCount > 50000 || // Large source tables\n      referencedTableRowCount > 100000 || // Large referenced tables\n      config.handleOrphans === 'remove' || // Data deletion\n      !config.deferrable || // Non-deferrable constraints\n      config.onDelete === 'CASCADE' || config.onUpdate === 'CASCADE'; // Cascading operations\n    \n    return {\n      estimatedDurationMs: Math.round(totalDuration),\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB: Math.round(diskSpaceRequiredMB),\n      recommendedMaintenanceWindow\n    };\n  }\n}","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for adding unique constraints safely\n */\nexport interface UniqueConstraintPatternConfig {\n  tableName: string;\n  constraintName?: string;\n  columnNames: string[];\n  handleDuplicates: 'fail' | 'remove' | 'mark';\n  duplicateHandlingStrategy?: 'keep_first' | 'keep_last' | 'manual';\n  batchSize?: number;\n  timeoutMs?: number;\n  createConcurrently?: boolean; // For PostgreSQL\n}\n\n/**\n * Safe unique constraint addition pattern result\n */\nexport interface UniqueConstraintPatternResult {\n  steps: SafeConstraintStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeConstraintStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  duplicateCount?: number;\n}\n\n/**\n * Individual step in safe constraint addition\n */\nexport interface SafeConstraintStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n/**\n * Safe Unique Constraint Addition Pattern\n * Implements the safest way to add unique constraints with duplicate handling\n */\nexport class UniqueConstraintPattern {\n  /**\n   * Generate safe unique constraint addition steps\n   */\n  public generateSafeSteps(config: UniqueConstraintPatternConfig): UniqueConstraintPatternResult {\n    const steps: SafeConstraintStep[] = [];\n    const rollbackSteps: SafeConstraintStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Generate constraint name if not provided\n    const constraintName = config.constraintName || \n      `uq_${config.tableName}_${config.columnNames.join('_')}`;\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, constraintName, preflightChecks);\n\n    // Generate steps based on duplicate handling strategy\n    this.generateConstraintSteps(config, constraintName, steps, rollbackSteps, warnings);\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Assess risk level for unique constraint addition\n   */\n  private assessRiskLevel(config: UniqueConstraintPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.handleDuplicates === 'fail') {\n      return 'CRITICAL'; // Will fail if duplicates exist\n    }\n    if (config.handleDuplicates === 'remove') {\n      return 'HIGH'; // Data deletion is high risk\n    }\n    if (config.columnNames.length > 3) {\n      return 'MEDIUM'; // Complex composite constraints\n    }\n    return 'LOW';\n  }\n\n  /**\n   * Add preflight checks for unique constraint addition\n   */\n  private addPreflightChecks(\n    config: UniqueConstraintPatternConfig,\n    constraintName: string,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Check if constraint '${constraintName}' already exists`,\n      `Verify all columns exist: ${config.columnNames.join(', ')}`,\n      `Check for duplicate values in target columns`,\n      `Verify table is not currently locked`,\n      `Check available disk space for operation`\n    );\n\n    if (config.handleDuplicates === 'remove') {\n      checks.push(\n        `Backup table data before duplicate removal`,\n        `Verify duplicate handling strategy is acceptable`\n      );\n    }\n  }\n\n  /**\n   * Generate constraint addition steps\n   */\n  private generateConstraintSteps(\n    config: UniqueConstraintPatternConfig,\n    constraintName: string,\n    steps: SafeConstraintStep[],\n    rollbackSteps: SafeConstraintStep[],\n    warnings: string[]\n  ): void {\n    const columnList = config.columnNames.join(', ');\n\n    // Step 1: Check for existing duplicates\n    steps.push({\n      id: 'check-duplicates',\n      description: `Check for duplicate values in columns: ${columnList}`,\n      sql: this.generateDuplicateCheckQuery(config),\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      validationQuery: this.generateDuplicateCheckQuery(config),\n      expectedResult: 0\n    });\n\n    // Step 2: Handle duplicates if they exist\n    if (config.handleDuplicates === 'remove') {\n      this.addDuplicateRemovalSteps(config, steps, rollbackSteps, warnings);\n    } else if (config.handleDuplicates === 'mark') {\n      this.addDuplicateMarkingSteps(config, steps, rollbackSteps, warnings);\n    }\n\n    // Step 3: Create unique index first (for better performance)\n    const usesConcurrentIndex = config.createConcurrently === true;\n    \n    steps.push({\n      id: 'create-unique-index',\n      description: `Create unique index for constraint ${constraintName}`,\n      sql: this.generateUniqueIndexSQL(config, constraintName, usesConcurrentIndex),\n      estimatedDurationMs: usesConcurrentIndex ? 30000 : 15000,\n      canRollback: true,\n      requiresMaintenanceWindow: !usesConcurrentIndex,\n      riskLevel: usesConcurrentIndex ? 'LOW' : 'MEDIUM'\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-unique-index',\n      description: `Drop unique index for constraint ${constraintName}`,\n      sql: `DROP INDEX IF EXISTS idx_${constraintName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Step 4: Add the actual constraint (using existing index)\n    steps.push({\n      id: 'add-unique-constraint',\n      description: `Add unique constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} ADD CONSTRAINT ${constraintName} UNIQUE (${columnList});`,\n      estimatedDurationMs: 3000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      validationQuery: this.generateConstraintValidationQuery(config.tableName, constraintName),\n      expectedResult: constraintName\n    });\n\n    rollbackSteps.push({\n      id: 'rollback-unique-constraint',\n      description: `Drop unique constraint ${constraintName}`,\n      sql: `ALTER TABLE ${config.tableName} DROP CONSTRAINT IF EXISTS ${constraintName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Add warnings based on configuration\n    this.addWarnings(config, warnings);\n  }\n\n  /**\n   * Generate SQL to check for duplicate values\n   */\n  private generateDuplicateCheckQuery(config: UniqueConstraintPatternConfig): string {\n    const columnList = config.columnNames.join(', ');\n    return `\n      SELECT COUNT(*) as duplicate_count\n      FROM (\n        SELECT ${columnList}, COUNT(*) as cnt\n        FROM ${config.tableName}\n        WHERE ${config.columnNames.map(col => `${col} IS NOT NULL`).join(' AND ')}\n        GROUP BY ${columnList}\n        HAVING COUNT(*) > 1\n      ) duplicates;\n    `.trim();\n  }\n\n  /**\n   * Add duplicate removal steps\n   */\n  private addDuplicateRemovalSteps(\n    config: UniqueConstraintPatternConfig,\n    steps: SafeConstraintStep[],\n    rollbackSteps: SafeConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'DESTRUCTIVE OPERATION: Duplicate removal will permanently delete data',\n      'Ensure you have a complete backup before proceeding',\n      'Consider manual duplicate resolution instead of automatic removal'\n    );\n\n    // Create backup table\n    steps.push({\n      id: 'backup-duplicates',\n      description: 'Create backup of duplicate records',\n      sql: this.generateDuplicateBackupSQL(config),\n      estimatedDurationMs: 10000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'MEDIUM'\n    });\n\n    // Remove duplicates\n    steps.push({\n      id: 'remove-duplicates',\n      description: 'Remove duplicate records',\n      sql: this.generateDuplicateRemovalSQL(config),\n      estimatedDurationMs: 20000,\n      canRollback: false, // Cannot rollback data deletion\n      requiresMaintenanceWindow: true,\n      riskLevel: 'HIGH'\n    });\n  }\n\n  /**\n   * Add duplicate marking steps\n   */\n  private addDuplicateMarkingSteps(\n    config: UniqueConstraintPatternConfig,\n    steps: SafeConstraintStep[],\n    rollbackSteps: SafeConstraintStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'Duplicate records will be marked but not removed',\n      'Manual intervention required to resolve duplicates',\n      'Constraint addition will fail until duplicates are resolved'\n    );\n\n    // Add duplicate marker column if it doesn't exist\n    steps.push({\n      id: 'add-duplicate-marker',\n      description: 'Add column to mark duplicate records',\n      sql: `ALTER TABLE ${config.tableName} ADD COLUMN IF NOT EXISTS _duplicate_marker BOOLEAN DEFAULT FALSE;`,\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Mark duplicates\n    steps.push({\n      id: 'mark-duplicates',\n      description: 'Mark duplicate records for manual resolution',\n      sql: this.generateDuplicateMarkingSQL(config),\n      estimatedDurationMs: 10000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n  }\n\n  /**\n   * Generate unique index creation SQL\n   */\n  private generateUniqueIndexSQL(\n    config: UniqueConstraintPatternConfig,\n    constraintName: string,\n    concurrent: boolean\n  ): string {\n    const columnList = config.columnNames.join(', ');\n    const concurrentClause = concurrent ? 'CONCURRENTLY' : '';\n    \n    return `CREATE UNIQUE INDEX ${concurrentClause} idx_${constraintName} ON ${config.tableName} (${columnList});`.trim();\n  }\n\n  /**\n   * Generate duplicate backup SQL\n   */\n  private generateDuplicateBackupSQL(config: UniqueConstraintPatternConfig): string {\n    const columnList = config.columnNames.join(', ');\n    const backupTableName = `${config.tableName}_duplicates_backup_${Date.now()}`;\n    \n    return `\n      CREATE TABLE ${backupTableName} AS\n      SELECT *\n      FROM ${config.tableName}\n      WHERE (${columnList}) IN (\n        SELECT ${columnList}\n        FROM ${config.tableName}\n        WHERE ${config.columnNames.map(col => `${col} IS NOT NULL`).join(' AND ')}\n        GROUP BY ${columnList}\n        HAVING COUNT(*) > 1\n      );\n    `.trim();\n  }\n\n  /**\n   * Generate duplicate removal SQL\n   */\n  private generateDuplicateRemovalSQL(config: UniqueConstraintPatternConfig): string {\n    const columnList = config.columnNames.join(', ');\n    const keepStrategy = config.duplicateHandlingStrategy || 'keep_first';\n    \n    // Use ROW_NUMBER() to identify which records to keep\n    const orderClause = keepStrategy === 'keep_last' ? 'DESC' : 'ASC';\n    \n    return `\n      DELETE FROM ${config.tableName}\n      WHERE ctid NOT IN (\n        SELECT ctid\n        FROM (\n          SELECT ctid, ROW_NUMBER() OVER (\n            PARTITION BY ${columnList} \n            ORDER BY ctid ${orderClause}\n          ) as rn\n          FROM ${config.tableName}\n          WHERE ${config.columnNames.map(col => `${col} IS NOT NULL`).join(' AND ')}\n        ) ranked\n        WHERE rn = 1\n      );\n    `.trim();\n  }\n\n  /**\n   * Generate duplicate marking SQL\n   */\n  private generateDuplicateMarkingSQL(config: UniqueConstraintPatternConfig): string {\n    const columnList = config.columnNames.join(', ');\n    \n    return `\n      UPDATE ${config.tableName}\n      SET _duplicate_marker = TRUE\n      WHERE (${columnList}) IN (\n        SELECT ${columnList}\n        FROM ${config.tableName}\n        WHERE ${config.columnNames.map(col => `${col} IS NOT NULL`).join(' AND ')}\n        GROUP BY ${columnList}\n        HAVING COUNT(*) > 1\n      );\n    `.trim();\n  }\n\n  /**\n   * Generate constraint validation query\n   */\n  private generateConstraintValidationQuery(tableName: string, constraintName: string): string {\n    return `\n      SELECT constraint_name\n      FROM information_schema.table_constraints\n      WHERE table_name = '${tableName}'\n        AND constraint_name = '${constraintName}'\n        AND constraint_type = 'UNIQUE';\n    `.trim();\n  }\n\n  /**\n   * Add configuration-specific warnings\n   */\n  private addWarnings(config: UniqueConstraintPatternConfig, warnings: string[]): void {\n    if (config.columnNames.length > 3) {\n      warnings.push('Complex composite unique constraints may impact query performance');\n    }\n\n    if (config.createConcurrently === false) {\n      warnings.push('Non-concurrent index creation will require maintenance window');\n    }\n\n    if (config.handleDuplicates === 'fail') {\n      warnings.push('Operation will fail if any duplicate values exist');\n    }\n  }\n\n  /**\n   * Generate validation queries for the constraint\n   */\n  public generateValidationQueries(config: UniqueConstraintPatternConfig): string[] {\n    const constraintName = config.constraintName || \n      `uq_${config.tableName}_${config.columnNames.join('_')}`;\n    \n    return [\n      this.generateDuplicateCheckQuery(config),\n      this.generateConstraintValidationQuery(config.tableName, constraintName),\n      `SELECT COUNT(*) FROM ${config.tableName};` // Verify no data loss\n    ];\n  }\n\n  /**\n   * Estimate performance impact of constraint addition\n   */\n  public estimatePerformanceImpact(\n    config: UniqueConstraintPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n  } {\n    // Base calculation factors\n    const rowsPerSecond = 10000;\n    const indexOverheadFactor = 1.5;\n    const memoryPerRow = 0.001; // 1KB per row estimate\n    \n    // Calculate duration based on row count and operation complexity\n    const duplicateCheckDuration = Math.max(1000, (tableRowCount / rowsPerSecond) * 1000);\n    const indexCreationDuration = Math.max(5000, (tableRowCount / rowsPerSecond) * 1000 * indexOverheadFactor);\n    const constraintAdditionDuration = 3000;\n    \n    let totalDuration = duplicateCheckDuration + indexCreationDuration + constraintAdditionDuration;\n    \n    // Additional overhead for duplicate handling\n    if (config.handleDuplicates === 'remove') {\n      totalDuration += (tableRowCount / rowsPerSecond) * 2000; // Additional time for deletion\n    }\n    \n    // Memory usage estimation\n    const memoryUsageMB = Math.max(50, tableRowCount * memoryPerRow);\n    \n    // Disk space for index (estimated)\n    const avgRowSize = 100; // bytes\n    const indexColumns = config.columnNames.length;\n    const diskSpaceRequiredMB = Math.max(10, (tableRowCount * avgRowSize * indexColumns) / (1024 * 1024));\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = \n      tableRowCount > 100000 || // Large tables\n      config.handleDuplicates === 'remove' || // Data deletion\n      config.createConcurrently === false; // Non-concurrent operations\n    \n    return {\n      estimatedDurationMs: Math.round(totalDuration),\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB: Math.round(diskSpaceRequiredMB),\n      recommendedMaintenanceWindow\n    };\n  }\n}","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for creating indexes\n */\nexport interface CreateIndexPatternConfig {\n  tableName: string;\n  indexName?: string;\n  columnNames: string[];\n  indexType?: 'BTREE' | 'HASH' | 'GIN' | 'GIST' | 'BRIN';\n  unique?: boolean;\n  partial?: boolean;\n  partialCondition?: string;\n  databaseType: 'postgresql' | 'mysql' | 'sqlite';\n  storageParameters?: Record<string, string>;\n  checkRedundancy?: boolean;\n  includeColumns?: string[]; // Covering index columns\n  batchSize?: number;\n  timeoutMs?: number;\n}\n\n/**\n * Safe index creation pattern result\n */\nexport interface CreateIndexPatternResult {\n  steps: SafeCreateIndexStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeCreateIndexStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  redundantIndexes?: RedundantIndexInfo[];\n  optimizationSuggestions?: string[];\n}\n\n/**\n * Individual step in safe index creation\n */\nexport interface SafeCreateIndexStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n}\n\n/**\n * Information about redundant indexes\n */\nexport interface RedundantIndexInfo {\n  existingIndexName: string;\n  existingColumns: string[];\n  redundancyType: 'duplicate' | 'subset' | 'superset' | 'overlapping';\n  recommendation: string;\n}\n\n/**\n * Safe Index Creation Pattern\n * Implements comprehensive index creation with redundancy detection and optimization\n */\nexport class CreateIndexPattern {\n  /**\n   * Generate safe index creation steps\n   */\n  public generateSafeSteps(config: CreateIndexPatternConfig): CreateIndexPatternResult {\n    const steps: SafeCreateIndexStep[] = [];\n    const rollbackSteps: SafeCreateIndexStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n    const redundantIndexes: RedundantIndexInfo[] = [];\n    const optimizationSuggestions: string[] = [];\n\n    // Generate index name if not provided\n    const indexName = config.indexName || this.generateIndexName(config);\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, indexName, preflightChecks);\n\n    // Generate index creation steps\n    this.generateIndexCreationSteps(config, indexName, steps, rollbackSteps, warnings);\n\n    // Analyze redundancy if requested\n    if (config.checkRedundancy !== false) {\n      this.generateRedundancyAnalysisSteps(config, steps, redundantIndexes, optimizationSuggestions);\n    }\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings,\n      redundantIndexes,\n      optimizationSuggestions\n    };\n  }\n\n  /**\n   * Generate appropriate index name\n   */\n  private generateIndexName(config: CreateIndexPatternConfig): string {\n    const columnPart = config.columnNames.join('_');\n    const uniquePart = config.unique ? 'unique_' : '';\n    const typePart = config.indexType && config.indexType !== 'BTREE' ? `_${config.indexType.toLowerCase()}` : '';\n    return `idx_${uniquePart}${config.tableName}_${columnPart}${typePart}`;\n  }\n\n  /**\n   * Assess risk level for index creation\n   */\n  private assessRiskLevel(config: CreateIndexPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.columnNames.length > 6) {\n      return 'HIGH'; // Very complex composite indexes\n    }\n    if (config.indexType === 'GIN' || config.indexType === 'GIST') {\n      return 'MEDIUM'; // Specialized index types\n    }\n    if (config.unique && !config.partial) {\n      return 'MEDIUM'; // Unique indexes can fail on duplicates\n    }\n    return 'LOW'; // Regular index creation is generally safe\n  }\n\n  /**\n   * Add preflight checks for index creation\n   */\n  private addPreflightChecks(\n    config: CreateIndexPatternConfig,\n    indexName: string,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Check if index '${indexName}' already exists`,\n      `Verify all columns exist: ${config.columnNames.join(', ')}`,\n      `Check available disk space for index creation`,\n      `Verify database has sufficient memory for operation`,\n      `Estimate index size and creation time`\n    );\n\n    if (config.includeColumns && config.includeColumns.length > 0) {\n      checks.push(\n        `Verify include columns exist: ${config.includeColumns.join(', ')}`,\n        `Check that include columns are not part of key columns`\n      );\n    }\n\n    if (config.partial && config.partialCondition) {\n      checks.push(\n        `Validate partial index condition: ${config.partialCondition}`,\n        `Estimate selectivity of partial condition`,\n        `Verify partial condition will benefit query performance`\n      );\n    }\n\n    if (config.unique) {\n      checks.push(\n        `Check for duplicate values that would prevent unique index creation`,\n        `Verify uniqueness constraint is beneficial for data integrity`\n      );\n    }\n\n    if (config.checkRedundancy !== false) {\n      checks.push(\n        `Analyze existing indexes for redundancy`,\n        `Check for indexes that could be combined or replaced`\n      );\n    }\n  }\n\n  /**\n   * Generate index creation steps\n   */\n  private generateIndexCreationSteps(\n    config: CreateIndexPatternConfig,\n    indexName: string,\n    steps: SafeCreateIndexStep[],\n    rollbackSteps: SafeCreateIndexStep[],\n    warnings: string[]\n  ): void {\n    // Step 1: Estimate index size and impact\n    steps.push({\n      id: 'estimate-index-impact',\n      description: `Estimate size and performance impact of index ${indexName}`,\n      sql: this.generateIndexEstimationQuery(config),\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Step 2: Check for existing similar indexes\n    steps.push({\n      id: 'analyze-existing-indexes',\n      description: `Analyze existing indexes on table ${config.tableName}`,\n      sql: this.generateExistingIndexAnalysisQuery(config),\n      estimatedDurationMs: 3000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Step 3: Create the index\n    const createSQL = this.generateCreateIndexSQL(config, indexName);\n    const estimatedDuration = this.estimateIndexCreationDuration(config);\n    \n    steps.push({\n      id: 'create-index',\n      description: `Create index ${indexName} on table ${config.tableName}`,\n      sql: createSQL,\n      estimatedDurationMs: estimatedDuration,\n      canRollback: true,\n      requiresMaintenanceWindow: this.requiresMaintenanceWindow(config),\n      riskLevel: config.unique ? 'MEDIUM' : 'LOW',\n      validationQuery: this.generateIndexValidationQuery(config.tableName, indexName),\n      expectedResult: indexName\n    });\n\n    // Step 4: Update table statistics after index creation\n    if (config.databaseType === 'postgresql') {\n      steps.push({\n        id: 'update-statistics',\n        description: `Update table statistics for ${config.tableName}`,\n        sql: `ANALYZE ${config.tableName};`,\n        estimatedDurationMs: 3000,\n        canRollback: true,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW'\n      });\n    }\n\n    // Rollback step\n    rollbackSteps.push({\n      id: 'rollback-index-creation',\n      description: `Drop index ${indexName} if creation failed`,\n      sql: this.generateDropIndexSQL(config, indexName),\n      estimatedDurationMs: 5000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Add warnings\n    this.addIndexSpecificWarnings(config, warnings);\n  }\n\n  /**\n   * Generate redundancy analysis steps\n   */\n  private generateRedundancyAnalysisSteps(\n    config: CreateIndexPatternConfig,\n    steps: SafeCreateIndexStep[],\n    redundantIndexes: RedundantIndexInfo[],\n    optimizationSuggestions: string[]\n  ): void {\n    steps.push({\n      id: 'redundancy-analysis',\n      description: `Analyze index redundancy for table ${config.tableName}`,\n      sql: this.generateRedundancyAnalysisQuery(config),\n      estimatedDurationMs: 8000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW'\n    });\n\n    // Add optimization suggestions\n    optimizationSuggestions.push(\n      'Consider combining similar indexes for better performance',\n      'Remove unused indexes to improve write performance',\n      'Use partial indexes for frequently queried subsets',\n      'Consider covering indexes for query optimization'\n    );\n  }\n\n  /**\n   * Generate CREATE INDEX SQL\n   */\n  private generateCreateIndexSQL(config: CreateIndexPatternConfig, indexName: string): string {\n    const columnList = config.columnNames.join(', ');\n    const uniqueClause = config.unique ? 'UNIQUE ' : '';\n    const indexTypeClause = this.getIndexTypeClause(config);\n    const includeClause = this.getIncludeClause(config);\n    const partialClause = config.partial && config.partialCondition ? ` WHERE ${config.partialCondition}` : '';\n    const storageClause = this.getStorageClause(config);\n\n    return `CREATE ${uniqueClause}INDEX ${indexName} ON ${config.tableName}${indexTypeClause} (${columnList})${includeClause}${partialClause}${storageClause};`;\n  }\n\n  /**\n   * Get index type clause based on database\n   */\n  private getIndexTypeClause(config: CreateIndexPatternConfig): string {\n    if (!config.indexType || config.indexType === 'BTREE') {\n      return '';\n    }\n\n    switch (config.databaseType) {\n      case 'postgresql':\n        return ` USING ${config.indexType}`;\n      case 'mysql':\n        return config.indexType === 'HASH' ? ' USING HASH' : '';\n      case 'sqlite':\n        return ''; // SQLite only supports BTREE-style indexes\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * Get include clause for covering indexes\n   */\n  private getIncludeClause(config: CreateIndexPatternConfig): string {\n    if (!config.includeColumns || config.includeColumns.length === 0) {\n      return '';\n    }\n\n    if (config.databaseType === 'postgresql') {\n      return ` INCLUDE (${config.includeColumns.join(', ')})`;\n    }\n\n    // MySQL and SQLite don't support INCLUDE clause\n    return '';\n  }\n\n  /**\n   * Get storage parameters clause\n   */\n  private getStorageClause(config: CreateIndexPatternConfig): string {\n    if (!config.storageParameters || Object.keys(config.storageParameters).length === 0) {\n      return '';\n    }\n\n    if (config.databaseType === 'postgresql') {\n      const params = Object.entries(config.storageParameters)\n        .map(([key, value]) => `${key} = ${value}`)\n        .join(', ');\n      return ` WITH (${params})`;\n    }\n\n    return '';\n  }\n\n  /**\n   * Generate index estimation query\n   */\n  private generateIndexEstimationQuery(config: CreateIndexPatternConfig): string {\n    switch (config.databaseType) {\n      case 'postgresql':\n        return `\n          SELECT \n            schemaname,\n            tablename,\n            attname,\n            n_distinct,\n            correlation,\n            avg_width,\n            null_frac\n          FROM pg_stats\n          WHERE tablename = '${config.tableName}'\n            AND attname IN ('${config.columnNames.join(\"', '\")}');\n        `.trim();\n      case 'mysql':\n        return `\n          SELECT \n            column_name,\n            cardinality,\n            data_type,\n            character_maximum_length\n          FROM information_schema.statistics s\n          JOIN information_schema.columns c USING (table_name, column_name)\n          WHERE s.table_name = '${config.tableName}'\n            AND s.column_name IN ('${config.columnNames.join(\"', '\")}');\n        `.trim();\n      case 'sqlite':\n        return `\n          SELECT \n            name,\n            type,\n            pk\n          FROM pragma_table_info('${config.tableName}')\n          WHERE name IN ('${config.columnNames.join(\"', '\")}');\n        `.trim();\n      default:\n        return `SELECT 1;`;\n    }\n  }\n\n  /**\n   * Generate existing index analysis query\n   */\n  private generateExistingIndexAnalysisQuery(config: CreateIndexPatternConfig): string {\n    switch (config.databaseType) {\n      case 'postgresql':\n        return `\n          SELECT \n            i.indexname,\n            i.indexdef,\n            pg_size_pretty(pg_relation_size(i.indexname::regclass)) as size,\n            s.idx_tup_read,\n            s.idx_tup_fetch\n          FROM pg_indexes i\n          LEFT JOIN pg_stat_user_indexes s ON i.indexname = s.indexrelname\n          WHERE i.tablename = '${config.tableName}';\n        `.trim();\n      case 'mysql':\n        return `\n          SELECT \n            index_name,\n            column_name,\n            cardinality,\n            sub_part,\n            packed,\n            nullable,\n            index_type\n          FROM information_schema.statistics\n          WHERE table_name = '${config.tableName}'\n          ORDER BY index_name, seq_in_index;\n        `.trim();\n      case 'sqlite':\n        return `\n          SELECT \n            name,\n            sql,\n            tbl_name\n          FROM sqlite_master\n          WHERE type = 'index'\n            AND tbl_name = '${config.tableName}';\n        `.trim();\n      default:\n        return `SELECT 1;`;\n    }\n  }\n\n  /**\n   * Generate redundancy analysis query\n   */\n  private generateRedundancyAnalysisQuery(config: CreateIndexPatternConfig): string {\n    // This is a complex analysis that would typically be done programmatically\n    // Here we provide a basic structure for each database\n    switch (config.databaseType) {\n      case 'postgresql':\n        return `\n          SELECT \n            i1.indexname as index1,\n            i2.indexname as index2,\n            i1.indexdef as def1,\n            i2.indexdef as def2\n          FROM pg_indexes i1\n          CROSS JOIN pg_indexes i2\n          WHERE i1.tablename = '${config.tableName}'\n            AND i2.tablename = '${config.tableName}'\n            AND i1.indexname < i2.indexname\n            AND (\n              -- Check for potential redundancy patterns\n              i1.indexdef LIKE '%' || split_part(i2.indexdef, '(', 2) || '%'\n              OR i2.indexdef LIKE '%' || split_part(i1.indexdef, '(', 2) || '%'\n            );\n        `.trim();\n      case 'mysql':\n        return `\n          SELECT \n            s1.index_name as index1,\n            s2.index_name as index2,\n            GROUP_CONCAT(s1.column_name ORDER BY s1.seq_in_index) as columns1,\n            GROUP_CONCAT(s2.column_name ORDER BY s2.seq_in_index) as columns2\n          FROM information_schema.statistics s1\n          JOIN information_schema.statistics s2 \n            ON s1.table_name = s2.table_name\n            AND s1.index_name < s2.index_name\n          WHERE s1.table_name = '${config.tableName}'\n          GROUP BY s1.index_name, s2.index_name;\n        `.trim();\n      case 'sqlite':\n        return `\n          SELECT \n            name,\n            sql\n          FROM sqlite_master\n          WHERE type = 'index'\n            AND tbl_name = '${config.tableName}'\n          ORDER BY name;\n        `.trim();\n      default:\n        return `SELECT 1;`;\n    }\n  }\n\n  /**\n   * Generate index validation query\n   */\n  private generateIndexValidationQuery(tableName: string, indexName: string): string {\n    return `\n      SELECT 1 as index_exists\n      FROM information_schema.statistics\n      WHERE table_name = '${tableName}'\n        AND index_name = '${indexName}'\n      LIMIT 1;\n    `.trim();\n  }\n\n  /**\n   * Generate drop index SQL for rollback\n   */\n  private generateDropIndexSQL(config: CreateIndexPatternConfig, indexName: string): string {\n    switch (config.databaseType) {\n      case 'postgresql':\n        return `DROP INDEX IF EXISTS ${indexName};`;\n      case 'mysql':\n        return `ALTER TABLE ${config.tableName} DROP INDEX IF EXISTS ${indexName};`;\n      case 'sqlite':\n        return `DROP INDEX IF EXISTS ${indexName};`;\n      default:\n        return `DROP INDEX IF EXISTS ${indexName};`;\n    }\n  }\n\n  /**\n   * Estimate index creation duration\n   */\n  private estimateIndexCreationDuration(config: CreateIndexPatternConfig): number {\n    // Base duration estimates in milliseconds\n    const baseDuration = 10000; // 10 seconds base\n    const columnFactor = config.columnNames.length * 2000; // 2 seconds per column\n    const uniqueFactor = config.unique ? 5000 : 0; // 5 seconds for uniqueness check\n    const typeFactor = this.getIndexTypeFactor(config.indexType) * 1000;\n\n    return baseDuration + columnFactor + uniqueFactor + typeFactor;\n  }\n\n  /**\n   * Get index type duration factor\n   */\n  private getIndexTypeFactor(indexType?: string): number {\n    switch (indexType) {\n      case 'GIN':\n        return 15; // GIN indexes take longer\n      case 'GIST':\n        return 12; // GIST indexes are complex\n      case 'HASH':\n        return 3; // Hash indexes are faster\n      case 'BRIN':\n        return 5; // BRIN indexes are moderately fast\n      default:\n        return 8; // BTREE default\n    }\n  }\n\n  /**\n   * Check if maintenance window is required\n   */\n  private requiresMaintenanceWindow(config: CreateIndexPatternConfig): boolean {\n    return config.unique || // Unique indexes may lock for duplicate checks\n           config.indexType === 'GIN' || \n           config.indexType === 'GIST' || // Complex index types\n           config.databaseType === 'sqlite'; // SQLite always locks\n  }\n\n  /**\n   * Add index-specific warnings\n   */\n  private addIndexSpecificWarnings(config: CreateIndexPatternConfig, warnings: string[]): void {\n    if (config.columnNames.length > 4) {\n      warnings.push('Composite index with many columns may impact write performance');\n    }\n\n    if (config.unique) {\n      warnings.push('Unique index creation will fail if duplicate values exist');\n    }\n\n    if (config.indexType === 'GIN' || config.indexType === 'GIST') {\n      warnings.push('Specialized index types require more maintenance overhead');\n    }\n\n    if (config.partial && !config.partialCondition) {\n      warnings.push('Partial index specified but no condition provided');\n    }\n\n    warnings.push(\n      'Index creation will impact write performance until completion',\n      'Monitor disk space usage during index creation',\n      'Consider creating index during low-traffic periods'\n    );\n  }\n\n  /**\n   * Generate validation queries for the index\n   */\n  public generateValidationQueries(config: CreateIndexPatternConfig): string[] {\n    const indexName = config.indexName || this.generateIndexName(config);\n    \n    return [\n      this.generateIndexValidationQuery(config.tableName, indexName),\n      `SELECT COUNT(*) FROM ${config.tableName};`, // Verify table accessibility\n      this.generateExistingIndexAnalysisQuery(config)\n    ];\n  }\n\n  /**\n   * Estimate performance impact of index creation\n   */\n  public estimatePerformanceImpact(\n    config: CreateIndexPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n    indexSizeEstimateMB: number;\n  } {\n    // Base calculation factors\n    const rowsPerSecond = 10000; // Standard index creation speed\n    const memoryPerRow = 0.003; // 3KB per row for index creation\n    \n    // Calculate duration based on table size and complexity\n    const complexityFactor = config.columnNames.length * 1.5;\n    const typeFactor = this.getIndexTypeFactor(config.indexType);\n    const uniqueFactor = config.unique ? 1.4 : 1.0;\n    \n    const baseDuration = (tableRowCount / rowsPerSecond) * 1000;\n    const adjustedDuration = baseDuration * complexityFactor * typeFactor * uniqueFactor;\n    \n    // Memory usage estimation\n    const memoryUsageMB = Math.max(50, tableRowCount * memoryPerRow);\n    \n    // Disk space estimation\n    const avgIndexEntrySize = 60; // bytes per index entry\n    const indexSizeEstimateMB = Math.max(5, \n      (tableRowCount * avgIndexEntrySize * config.columnNames.length) / (1024 * 1024)\n    );\n    \n    // Include columns add to size\n    if (config.includeColumns && config.includeColumns.length > 0) {\n      const includeSize = indexSizeEstimateMB * (config.includeColumns.length * 0.3);\n      return {\n        ...this.estimatePerformanceImpact(config, tableRowCount),\n        indexSizeEstimateMB: indexSizeEstimateMB + includeSize\n      };\n    }\n    \n    const diskSpaceRequiredMB = indexSizeEstimateMB * 1.5; // Extra space for creation\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = this.requiresMaintenanceWindow(config) || \n                                        tableRowCount > 500000; // Large tables\n    \n    return {\n      estimatedDurationMs: Math.round(adjustedDuration),\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB: Math.round(diskSpaceRequiredMB),\n      recommendedMaintenanceWindow,\n      indexSizeEstimateMB: Math.round(indexSizeEstimateMB)\n    };\n  }\n} ","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for dropping indexes safely\n */\nexport interface DropIndexPatternConfig {\n  tableName: string;\n  indexName: string;\n  databaseType: 'postgresql' | 'mysql' | 'sqlite';\n  createBackup?: boolean;\n  validateBeforeDrop?: boolean;\n  checkQueryPerformance?: boolean;\n  timeoutMs?: number;\n  maxRetries?: number;\n  cascadeOptions?: boolean; // For constraint-dependent indexes\n}\n\n/**\n * Safe index drop pattern result\n */\nexport interface DropIndexPatternResult {\n  steps: SafeDropIndexStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeDropIndexStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  backupStatements?: string[];\n  performanceImpactQueries?: string[];\n}\n\n/**\n * Individual step in safe index drop\n */\nexport interface SafeDropIndexStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  databaseSpecific?: string[];\n}\n\n/**\n * Safe Index Drop Pattern\n * Implements database-specific index dropping strategies with safety measures\n */\nexport class DropIndexPattern {\n  /**\n   * Generate safe index drop steps\n   */\n  public generateSafeSteps(config: DropIndexPatternConfig): DropIndexPatternResult {\n    const steps: SafeDropIndexStep[] = [];\n    const rollbackSteps: SafeDropIndexStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n    const backupStatements: string[] = [];\n    const performanceImpactQueries: string[] = [];\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, preflightChecks);\n\n    // Generate performance impact queries if requested\n    if (config.checkQueryPerformance) {\n      this.generatePerformanceImpactQueries(config, performanceImpactQueries);\n    }\n\n    // Generate backup statements if requested\n    if (config.createBackup) {\n      this.generateBackupStatements(config, backupStatements);\n    }\n\n    // Generate database-specific steps\n    this.generateDatabaseSpecificSteps(config, steps, rollbackSteps, warnings);\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings,\n      backupStatements: backupStatements.length > 0 ? backupStatements : undefined,\n      performanceImpactQueries: performanceImpactQueries.length > 0 ? performanceImpactQueries : undefined\n    };\n  }\n\n  /**\n   * Assess risk level for index drop\n   */\n  private assessRiskLevel(config: DropIndexPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    // Primary keys and unique constraints are critical\n    if (config.indexName.toLowerCase().includes('primary') || \n        config.indexName.toLowerCase().includes('pk_')) {\n      return 'CRITICAL';\n    }\n    \n    // Unique indexes are high risk\n    if (config.indexName.toLowerCase().includes('unique') || \n        config.indexName.toLowerCase().includes('uq_')) {\n      return 'HIGH';\n    }\n\n    // Foreign key indexes are medium risk\n    if (config.indexName.toLowerCase().includes('foreign') || \n        config.indexName.toLowerCase().includes('fk_')) {\n      return 'MEDIUM';\n    }\n\n    // Regular indexes are generally low risk to drop\n    return 'LOW';\n  }\n\n  /**\n   * Add preflight checks for index drop\n   */\n  private addPreflightChecks(\n    config: DropIndexPatternConfig,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Verify index '${config.indexName}' exists on table`,\n      `Check if index is referenced by constraints`,\n      `Identify queries that currently use this index`,\n      `Check for foreign key dependencies on this index`,\n      `Verify no long-running transactions are using the index`\n    );\n\n    if (config.databaseType === 'postgresql') {\n      checks.push(\n        `Check if index is used for constraint enforcement`,\n        `Verify no concurrent index operations are running`,\n        `Check index usage statistics from pg_stat_user_indexes`\n      );\n    }\n\n    if (config.databaseType === 'mysql') {\n      checks.push(\n        `Check if index is part of a composite foreign key`,\n        `Verify storage engine supports index dropping: ${config.cascadeOptions ? 'with cascade' : 'without cascade'}`,\n        `Check information_schema.statistics for index usage`\n      );\n    }\n\n    if (config.checkQueryPerformance) {\n      checks.push(\n        `Analyze query performance impact of index removal`,\n        `Identify queries that may become slower without this index`,\n        `Check execution plans for queries using this index`\n      );\n    }\n\n    if (config.createBackup) {\n      checks.push(\n        `Verify sufficient disk space for index recreation script`,\n        `Check permissions for index recreation`\n      );\n    }\n  }\n\n  /**\n   * Generate performance impact analysis queries\n   */\n  private generatePerformanceImpactQueries(\n    config: DropIndexPatternConfig,\n    queries: string[]\n  ): void {\n    switch (config.databaseType) {\n      case 'postgresql':\n        queries.push(\n          `SELECT schemaname, tablename, attname, n_distinct, correlation \n           FROM pg_stats \n           WHERE tablename = '${config.tableName}'`,\n          `SELECT indexrelname, idx_scan, idx_tup_read, idx_tup_fetch \n           FROM pg_stat_user_indexes \n           WHERE indexrelname = '${config.indexName}'`,\n          `SELECT query, calls, mean_time, total_time \n           FROM pg_stat_statements \n           WHERE query ILIKE '%${config.tableName}%'`\n        );\n        break;\n      case 'mysql':\n        queries.push(\n          `SELECT INDEX_NAME, CARDINALITY, SUB_PART, PACKED, NULLABLE, INDEX_TYPE, COMMENT, INDEX_COMMENT \n           FROM information_schema.STATISTICS \n           WHERE TABLE_NAME = '${config.tableName}' AND INDEX_NAME = '${config.indexName}'`,\n          `SHOW INDEX FROM ${config.tableName} WHERE Key_name = '${config.indexName}'`\n        );\n        break;\n      case 'sqlite':\n        queries.push(\n          `PRAGMA index_info('${config.indexName}')`,\n          `PRAGMA index_list('${config.tableName}')`,\n          `EXPLAIN QUERY PLAN SELECT * FROM ${config.tableName} WHERE /* typical where clause */`\n        );\n        break;\n    }\n  }\n\n  /**\n   * Generate backup statements for index recreation\n   */\n  private generateBackupStatements(\n    config: DropIndexPatternConfig,\n    statements: string[]\n  ): void {\n    // First, get the index definition\n    switch (config.databaseType) {\n      case 'postgresql':\n        statements.push(\n          `-- Backup command to recreate index '${config.indexName}'`,\n          `SELECT indexdef FROM pg_indexes WHERE indexname = '${config.indexName}' AND tablename = '${config.tableName}';`,\n          `-- Note: Save the returned CREATE INDEX statement for rollback`\n        );\n        break;\n      case 'mysql':\n        statements.push(\n          `-- Backup command to recreate index '${config.indexName}'`,\n          `SHOW CREATE TABLE ${config.tableName};`,\n          `-- Note: Extract the index definition from the CREATE TABLE statement for rollback`\n        );\n        break;\n      case 'sqlite':\n        statements.push(\n          `-- Backup command to recreate index '${config.indexName}'`,\n          `SELECT sql FROM sqlite_master WHERE type = 'index' AND name = '${config.indexName}';`,\n          `-- Note: Save the returned CREATE INDEX statement for rollback`\n        );\n        break;\n    }\n  }\n\n  /**\n   * Generate database-specific index drop steps\n   */\n  private generateDatabaseSpecificSteps(\n    config: DropIndexPatternConfig,\n    steps: SafeDropIndexStep[],\n    rollbackSteps: SafeDropIndexStep[],\n    warnings: string[]\n  ): void {\n    switch (config.databaseType) {\n      case 'postgresql':\n        this.generatePostgreSQLSteps(config, steps, rollbackSteps, warnings);\n        break;\n      case 'mysql':\n        this.generateMySQLSteps(config, steps, rollbackSteps, warnings);\n        break;\n      case 'sqlite':\n        this.generateSQLiteSteps(config, steps, rollbackSteps, warnings);\n        break;\n    }\n  }\n\n  /**\n   * Generate PostgreSQL index drop steps\n   */\n  private generatePostgreSQLSteps(\n    config: DropIndexPatternConfig,\n    steps: SafeDropIndexStep[],\n    rollbackSteps: SafeDropIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'PostgreSQL index drops are generally safe but immediate',\n      'Consider using DROP INDEX CONCURRENTLY for large indexes',\n      'Index drop will briefly lock the table',\n      'Verify no critical queries depend on this index'\n    );\n\n    // Step 1: Get index definition for rollback\n    if (config.createBackup) {\n      steps.push({\n        id: 'backup_index_definition',\n        description: `Backup index definition for '${config.indexName}'`,\n        sql: `SELECT indexdef FROM pg_indexes WHERE indexname = '${config.indexName}' AND tablename = '${config.tableName}';`,\n        estimatedDurationMs: 100,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW',\n        databaseSpecific: ['postgresql']\n      });\n    }\n\n    // Step 2: Check for constraint dependencies\n    steps.push({\n      id: 'check_constraint_dependencies',\n      description: `Check if index '${config.indexName}' supports constraints`,\n      sql: `SELECT constraint_name, constraint_type \n            FROM information_schema.table_constraints tc\n            JOIN information_schema.constraint_column_usage ccu USING (constraint_name)\n            WHERE tc.table_name = '${config.tableName}' \n            AND ccu.column_name IN (\n              SELECT column_name FROM information_schema.key_column_usage \n              WHERE table_name = '${config.tableName}'\n            );`,\n      estimatedDurationMs: 200,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.table_constraints WHERE table_name = '${config.tableName}'`,\n      riskLevel: 'LOW',\n      databaseSpecific: ['postgresql']\n    });\n\n    // Step 3: Drop the index\n    const dropSql = `DROP INDEX${config.cascadeOptions ? ' CASCADE' : ''} IF EXISTS ${config.indexName};`;\n    steps.push({\n      id: 'drop_index',\n      description: `Drop index '${config.indexName}' from table '${config.tableName}'`,\n      sql: dropSql,\n      estimatedDurationMs: 500,\n      canRollback: config.createBackup,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT COUNT(*) FROM pg_indexes WHERE indexname = '${config.indexName}' AND tablename = '${config.tableName}';`,\n      expectedResult: 0,\n      riskLevel: config.cascadeOptions ? 'HIGH' : 'MEDIUM',\n      databaseSpecific: ['postgresql']\n    });\n\n    // Rollback step\n    if (config.createBackup) {\n      rollbackSteps.push({\n        id: 'recreate_index',\n        description: `Recreate index '${config.indexName}' using backed up definition`,\n        sql: `-- Execute the CREATE INDEX statement from backup`,\n        estimatedDurationMs: 2000,\n        canRollback: false,\n        requiresMaintenanceWindow: true,\n        riskLevel: 'MEDIUM',\n        databaseSpecific: ['postgresql']\n      });\n    }\n  }\n\n  /**\n   * Generate MySQL index drop steps\n   */\n  private generateMySQLSteps(\n    config: DropIndexPatternConfig,\n    steps: SafeDropIndexStep[],\n    rollbackSteps: SafeDropIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'MySQL index drops may briefly lock the table',\n      'Consider maintenance window for large tables',\n      'Verify index is not part of foreign key constraint'\n    );\n\n    // Step 1: Get index definition for rollback\n    if (config.createBackup) {\n      steps.push({\n        id: 'backup_index_definition',\n        description: `Backup index definition for '${config.indexName}'`,\n        sql: `SHOW CREATE TABLE ${config.tableName};`,\n        estimatedDurationMs: 100,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW',\n        databaseSpecific: ['mysql']\n      });\n    }\n\n    // Step 2: Check for foreign key dependencies\n    steps.push({\n      id: 'check_foreign_key_dependencies',\n      description: `Check if index '${config.indexName}' is used by foreign keys`,\n      sql: `SELECT CONSTRAINT_NAME, COLUMN_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME \n            FROM information_schema.KEY_COLUMN_USAGE \n            WHERE TABLE_NAME = '${config.tableName}' \n            AND REFERENCED_TABLE_NAME IS NOT NULL;`,\n      estimatedDurationMs: 200,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['mysql']\n    });\n\n    // Step 3: Drop the index\n    const dropSql = `ALTER TABLE ${config.tableName} DROP INDEX ${config.indexName};`;\n    steps.push({\n      id: 'drop_index',\n      description: `Drop index '${config.indexName}' from table '${config.tableName}'`,\n      sql: dropSql,\n      estimatedDurationMs: 1000,\n      canRollback: config.createBackup,\n      requiresMaintenanceWindow: true,\n      validationQuery: `SELECT COUNT(*) FROM information_schema.STATISTICS WHERE TABLE_NAME = '${config.tableName}' AND INDEX_NAME = '${config.indexName}';`,\n      expectedResult: 0,\n      riskLevel: 'MEDIUM',\n      databaseSpecific: ['mysql']\n    });\n\n    // Rollback step\n    if (config.createBackup) {\n      rollbackSteps.push({\n        id: 'recreate_index',\n        description: `Recreate index '${config.indexName}' using backed up definition`,\n        sql: `-- Extract and execute the index definition from SHOW CREATE TABLE backup`,\n        estimatedDurationMs: 3000,\n        canRollback: false,\n        requiresMaintenanceWindow: true,\n        riskLevel: 'HIGH',\n        databaseSpecific: ['mysql']\n      });\n    }\n  }\n\n  /**\n   * Generate SQLite index drop steps\n   */\n  private generateSQLiteSteps(\n    config: DropIndexPatternConfig,\n    steps: SafeDropIndexStep[],\n    rollbackSteps: SafeDropIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'SQLite index drops are immediate but safe',\n      'No table locking occurs during index drop',\n      'Consider impact on query performance'\n    );\n\n    // Step 1: Get index definition for rollback\n    if (config.createBackup) {\n      steps.push({\n        id: 'backup_index_definition',\n        description: `Backup index definition for '${config.indexName}'`,\n        sql: `SELECT sql FROM sqlite_master WHERE type = 'index' AND name = '${config.indexName}';`,\n        estimatedDurationMs: 50,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW',\n        databaseSpecific: ['sqlite']\n      });\n    }\n\n    // Step 2: Drop the index\n    const dropSql = `DROP INDEX IF EXISTS ${config.indexName};`;\n    steps.push({\n      id: 'drop_index',\n      description: `Drop index '${config.indexName}'`,\n      sql: dropSql,\n      estimatedDurationMs: 100,\n      canRollback: config.createBackup,\n      requiresMaintenanceWindow: false,\n      validationQuery: `SELECT COUNT(*) FROM sqlite_master WHERE type = 'index' AND name = '${config.indexName}';`,\n      expectedResult: 0,\n      riskLevel: 'LOW',\n      databaseSpecific: ['sqlite']\n    });\n\n    // Rollback step\n    if (config.createBackup) {\n      rollbackSteps.push({\n        id: 'recreate_index',\n        description: `Recreate index '${config.indexName}' using backed up definition`,\n        sql: `-- Execute the CREATE INDEX statement from backup`,\n        estimatedDurationMs: 500,\n        canRollback: false,\n        requiresMaintenanceWindow: false,\n        riskLevel: 'LOW',\n        databaseSpecific: ['sqlite']\n      });\n    }\n  }\n\n  /**\n   * Generate validation queries for index drop operation\n   */\n  public generateValidationQueries(config: DropIndexPatternConfig): string[] {\n    const queries: string[] = [];\n\n    switch (config.databaseType) {\n      case 'postgresql':\n        queries.push(\n          `SELECT COUNT(*) FROM pg_indexes WHERE indexname = '${config.indexName}' AND tablename = '${config.tableName}';`,\n          `SELECT schemaname, tablename, indexname, indexdef FROM pg_indexes WHERE tablename = '${config.tableName}';`\n        );\n        break;\n      case 'mysql':\n        queries.push(\n          `SELECT COUNT(*) FROM information_schema.STATISTICS WHERE TABLE_NAME = '${config.tableName}' AND INDEX_NAME = '${config.indexName}';`,\n          `SHOW INDEX FROM ${config.tableName};`\n        );\n        break;\n      case 'sqlite':\n        queries.push(\n          `SELECT COUNT(*) FROM sqlite_master WHERE type = 'index' AND name = '${config.indexName}';`,\n          `PRAGMA index_list('${config.tableName}');`\n        );\n        break;\n    }\n\n    return queries;\n  }\n\n  /**\n   * Estimate performance impact of index drop\n   */\n  public estimatePerformanceImpact(\n    config: DropIndexPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    potentialQuerySlowdown: 'NONE' | 'MINOR' | 'MODERATE' | 'SEVERE';\n    affectedQueryTypes: string[];\n    recommendedActions: string[];\n    riskAssessment: string;\n  } {\n    let estimatedDurationMs = 100; // Base time for simple index drop\n    let potentialQuerySlowdown: 'NONE' | 'MINOR' | 'MODERATE' | 'SEVERE' = 'MINOR';\n    const affectedQueryTypes: string[] = [];\n    const recommendedActions: string[] = [];\n\n    // Adjust based on database type\n    switch (config.databaseType) {\n      case 'postgresql':\n        estimatedDurationMs = Math.min(500, tableRowCount / 10000 * 100);\n        break;\n      case 'mysql':\n        estimatedDurationMs = Math.min(2000, tableRowCount / 5000 * 100);\n        break;\n      case 'sqlite':\n        estimatedDurationMs = 50;\n        break;\n    }\n\n    // Assess query performance impact based on index name patterns\n    if (config.indexName.toLowerCase().includes('primary') || \n        config.indexName.toLowerCase().includes('pk_')) {\n      potentialQuerySlowdown = 'SEVERE';\n      affectedQueryTypes.push('Primary key lookups', 'Join operations', 'All queries');\n      recommendedActions.push('DO NOT DROP - Primary key indexes are essential');\n    } else if (config.indexName.toLowerCase().includes('unique') || \n               config.indexName.toLowerCase().includes('uq_')) {\n      potentialQuerySlowdown = 'MODERATE';\n      affectedQueryTypes.push('Unique constraint checks', 'Equality searches');\n      recommendedActions.push('Verify no unique constraints depend on this index');\n    } else if (config.indexName.toLowerCase().includes('foreign') || \n               config.indexName.toLowerCase().includes('fk_')) {\n      potentialQuerySlowdown = 'MODERATE';\n      affectedQueryTypes.push('Foreign key constraint checks', 'Join operations');\n      recommendedActions.push('Check foreign key constraint dependencies');\n    } else {\n      potentialQuerySlowdown = 'MINOR';\n      affectedQueryTypes.push('Range queries', 'Sorting operations', 'Filtered searches');\n      recommendedActions.push('Monitor query performance after index drop');\n    }\n\n    // Large table considerations\n    if (tableRowCount > 1000000) {\n      recommendedActions.push('Consider maintenance window for large table');\n      if (config.databaseType === 'mysql') {\n        estimatedDurationMs *= 2; // MySQL may take longer on large tables\n      }\n    }\n\n    const riskAssessment = `Risk Level: ${this.assessRiskLevel(config)} - Dropping this index may impact query performance. ${\n      potentialQuerySlowdown === 'SEVERE' ? 'CRITICAL: This appears to be a system-critical index.' :\n      potentialQuerySlowdown === 'MODERATE' ? 'CAUTION: This index may be important for performance.' :\n      'Generally safe to drop with minimal performance impact.'\n    }`;\n\n    return {\n      estimatedDurationMs,\n      potentialQuerySlowdown,\n      affectedQueryTypes,\n      recommendedActions,\n      riskAssessment\n    };\n  }\n}\n\n/**\n * Default export for convenient usage\n */\nexport default DropIndexPattern;","// Define types locally to avoid cross-package dependencies in patterns\n\n/**\n * Configuration for creating indexes concurrently\n */\nexport interface ConcurrentIndexPatternConfig {\n  tableName: string;\n  indexName?: string;\n  columnNames: string[];\n  indexType?: 'BTREE' | 'HASH' | 'GIN' | 'GIST' | 'BRIN';\n  unique?: boolean;\n  partial?: boolean;\n  partialCondition?: string;\n  databaseType: 'postgresql' | 'mysql' | 'sqlite';\n  online?: boolean; // For MySQL online index creation\n  storageEngine?: 'InnoDB' | 'MyISAM'; // For MySQL\n  batchSize?: number;\n  timeoutMs?: number;\n  maxRetries?: number;\n}\n\n/**\n * Safe concurrent index creation pattern result\n */\nexport interface ConcurrentIndexPatternResult {\n  steps: SafeConcurrentIndexStep[];\n  estimatedDurationMs: number;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  rollbackSteps: SafeConcurrentIndexStep[];\n  preflightChecks: string[];\n  warnings: string[];\n  indexSizeEstimateMB?: number;\n}\n\n/**\n * Individual step in safe concurrent index creation\n */\nexport interface SafeConcurrentIndexStep {\n  id: string;\n  description: string;\n  sql: string;\n  estimatedDurationMs: number;\n  canRollback: boolean;\n  requiresMaintenanceWindow: boolean;\n  validationQuery?: string;\n  expectedResult?: any;\n  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  databaseSpecific?: string[];\n}\n\n/**\n * Safe Concurrent Index Creation Pattern\n * Implements database-specific concurrent index creation strategies\n */\nexport class ConcurrentIndexPattern {\n  /**\n   * Generate safe concurrent index creation steps\n   */\n  public generateSafeSteps(config: ConcurrentIndexPatternConfig): ConcurrentIndexPatternResult {\n    const steps: SafeConcurrentIndexStep[] = [];\n    const rollbackSteps: SafeConcurrentIndexStep[] = [];\n    const preflightChecks: string[] = [];\n    const warnings: string[] = [];\n\n    // Generate index name if not provided\n    const indexName = config.indexName || this.generateIndexName(config);\n\n    // Assess risk level\n    const riskLevel = this.assessRiskLevel(config);\n\n    // Add preflight checks\n    this.addPreflightChecks(config, indexName, preflightChecks);\n\n    // Generate database-specific steps\n    this.generateDatabaseSpecificSteps(config, indexName, steps, rollbackSteps, warnings);\n\n    const estimatedDurationMs = steps.reduce((total, step) => total + step.estimatedDurationMs, 0);\n\n    return {\n      steps,\n      estimatedDurationMs,\n      riskLevel,\n      rollbackSteps: rollbackSteps.reverse(),\n      preflightChecks,\n      warnings\n    };\n  }\n\n  /**\n   * Generate appropriate index name\n   */\n  private generateIndexName(config: ConcurrentIndexPatternConfig): string {\n    const columnPart = config.columnNames.join('_');\n    const uniquePart = config.unique ? 'unique_' : '';\n    return `idx_${uniquePart}${config.tableName}_${columnPart}`;\n  }\n\n  /**\n   * Assess risk level for concurrent index creation\n   */\n  private assessRiskLevel(config: ConcurrentIndexPatternConfig): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {\n    if (config.databaseType === 'sqlite') {\n      return 'MEDIUM'; // SQLite doesn't support true concurrent index creation\n    }\n    if (config.columnNames.length > 5) {\n      return 'MEDIUM'; // Complex composite indexes\n    }\n    if (config.indexType === 'GIN' || config.indexType === 'GIST') {\n      return 'MEDIUM'; // Specialized index types take longer\n    }\n    return 'LOW'; // Concurrent index creation is generally low risk\n  }\n\n  /**\n   * Add preflight checks for concurrent index creation\n   */\n  private addPreflightChecks(\n    config: ConcurrentIndexPatternConfig,\n    indexName: string,\n    checks: string[]\n  ): void {\n    checks.push(\n      `Verify table '${config.tableName}' exists`,\n      `Check if index '${indexName}' already exists`,\n      `Verify all columns exist: ${config.columnNames.join(', ')}`,\n      `Check available disk space for index creation`,\n      `Verify database has sufficient memory for operation`,\n      `Check for long-running transactions that might block index creation`\n    );\n\n    if (config.databaseType === 'postgresql') {\n      checks.push(\n        `Verify PostgreSQL version supports CONCURRENTLY (9.2+)`,\n        `Check for conflicting index creation operations`,\n        `Verify connection will not timeout during long operation`\n      );\n    }\n\n    if (config.databaseType === 'mysql') {\n      checks.push(\n        `Verify MySQL version supports online index creation (5.6+)`,\n        `Check storage engine supports online operations: ${config.storageEngine || 'InnoDB'}`,\n        `Verify innodb_online_alter_log_max_size is sufficient`\n      );\n    }\n\n    if (config.partial && config.partialCondition) {\n      checks.push(\n        `Validate partial index condition: ${config.partialCondition}`,\n        `Estimate percentage of rows that will be indexed`\n      );\n    }\n\n    if (config.unique) {\n      checks.push(\n        `Check for duplicate values that would prevent unique index creation`,\n        `Verify uniqueness constraint is actually needed`\n      );\n    }\n  }\n\n  /**\n   * Generate database-specific concurrent index creation steps\n   */\n  private generateDatabaseSpecificSteps(\n    config: ConcurrentIndexPatternConfig,\n    indexName: string,\n    steps: SafeConcurrentIndexStep[],\n    rollbackSteps: SafeConcurrentIndexStep[],\n    warnings: string[]\n  ): void {\n    switch (config.databaseType) {\n      case 'postgresql':\n        this.generatePostgreSQLSteps(config, indexName, steps, rollbackSteps, warnings);\n        break;\n      case 'mysql':\n        this.generateMySQLSteps(config, indexName, steps, rollbackSteps, warnings);\n        break;\n      case 'sqlite':\n        this.generateSQLiteSteps(config, indexName, steps, rollbackSteps, warnings);\n        break;\n    }\n  }\n\n  /**\n   * Generate PostgreSQL concurrent index creation steps\n   */\n  private generatePostgreSQLSteps(\n    config: ConcurrentIndexPatternConfig,\n    indexName: string,\n    steps: SafeConcurrentIndexStep[],\n    rollbackSteps: SafeConcurrentIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'PostgreSQL CONCURRENTLY index creation is safe for production',\n      'Operation may take significant time on large tables',\n      'Index creation will not block reads or writes',\n      'Connection must remain stable throughout the operation'\n    );\n\n    // Step 1: Check for existing duplicate or conflicting indexes\n    steps.push({\n      id: 'check-existing-indexes',\n      description: `Check for existing or conflicting indexes on ${config.tableName}`,\n      sql: this.generateExistingIndexCheckQuery(config),\n      estimatedDurationMs: 3000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['postgresql']\n    });\n\n    // Step 2: Estimate index size and duration\n    steps.push({\n      id: 'estimate-index-metrics',\n      description: 'Estimate index size and creation duration',\n      sql: this.generateIndexEstimationQuery(config),\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['postgresql']\n    });\n\n    // Step 3: Create the index concurrently\n    const createSQL = this.generatePostgreSQLCreateIndexSQL(config, indexName);\n    \n    steps.push({\n      id: 'create-concurrent-index',\n      description: `Create index ${indexName} concurrently`,\n      sql: createSQL,\n      estimatedDurationMs: 60000, // Conservative estimate for large tables\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      validationQuery: this.generateIndexValidationQuery(config.tableName, indexName),\n      expectedResult: indexName,\n      databaseSpecific: ['postgresql']\n    });\n\n    // Step 4: Analyze the new index for optimization\n    steps.push({\n      id: 'analyze-new-index',\n      description: `Analyze newly created index ${indexName}`,\n      sql: `ANALYZE ${config.tableName};`,\n      estimatedDurationMs: 5000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['postgresql']\n    });\n\n    // Rollback step\n    rollbackSteps.push({\n      id: 'rollback-concurrent-index',\n      description: `Drop index ${indexName} if creation failed`,\n      sql: `DROP INDEX CONCURRENTLY IF EXISTS ${indexName};`,\n      estimatedDurationMs: 10000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['postgresql']\n    });\n  }\n\n  /**\n   * Generate MySQL online index creation steps\n   */\n  private generateMySQLSteps(\n    config: ConcurrentIndexPatternConfig,\n    indexName: string,\n    steps: SafeConcurrentIndexStep[],\n    rollbackSteps: SafeConcurrentIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'MySQL online index creation requires InnoDB storage engine',\n      'ALGORITHM=INPLACE and LOCK=NONE for concurrent operation',\n      'Operation may require significant temporary disk space',\n      'Monitor innodb_online_alter_log_max_size during operation'\n    );\n\n    // Step 1: Verify InnoDB storage engine\n    steps.push({\n      id: 'verify-storage-engine',\n      description: `Verify ${config.tableName} uses InnoDB storage engine`,\n      sql: this.generateStorageEngineCheckQuery(config),\n      estimatedDurationMs: 1000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['mysql']\n    });\n\n    // Step 2: Check available disk space\n    steps.push({\n      id: 'check-disk-space',\n      description: 'Check available disk space for online index creation',\n      sql: this.generateDiskSpaceCheckQuery(),\n      estimatedDurationMs: 2000,\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['mysql']\n    });\n\n    // Step 3: Create the index online\n    const createSQL = this.generateMySQLCreateIndexSQL(config, indexName);\n    \n    steps.push({\n      id: 'create-online-index',\n      description: `Create index ${indexName} online`,\n      sql: createSQL,\n      estimatedDurationMs: 45000, // MySQL is generally faster than PostgreSQL\n      canRollback: true,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      validationQuery: this.generateIndexValidationQuery(config.tableName, indexName),\n      expectedResult: indexName,\n      databaseSpecific: ['mysql']\n    });\n\n    // Rollback step\n    rollbackSteps.push({\n      id: 'rollback-online-index',\n      description: `Drop index ${indexName} if creation failed`,\n      sql: `ALTER TABLE ${config.tableName} DROP INDEX IF EXISTS ${indexName};`,\n      estimatedDurationMs: 8000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['mysql']\n    });\n  }\n\n  /**\n   * Generate SQLite index creation steps (no true concurrency)\n   */\n  private generateSQLiteSteps(\n    config: ConcurrentIndexPatternConfig,\n    indexName: string,\n    steps: SafeConcurrentIndexStep[],\n    rollbackSteps: SafeConcurrentIndexStep[],\n    warnings: string[]\n  ): void {\n    warnings.push(\n      'SQLite does not support true concurrent index creation',\n      'Index creation will briefly lock the table',\n      'Operation is generally fast on SQLite',\n      'Consider creating index during low-traffic periods'\n    );\n\n    // Step 1: Create the index (SQLite style)\n    const createSQL = this.generateSQLiteCreateIndexSQL(config, indexName);\n    \n    steps.push({\n      id: 'create-index-sqlite',\n      description: `Create index ${indexName} on SQLite`,\n      sql: createSQL,\n      estimatedDurationMs: 15000, // SQLite is generally fast\n      canRollback: true,\n      requiresMaintenanceWindow: true, // SQLite locks the table\n      riskLevel: 'MEDIUM',\n      validationQuery: this.generateIndexValidationQuery(config.tableName, indexName),\n      expectedResult: indexName,\n      databaseSpecific: ['sqlite']\n    });\n\n    // Rollback step\n    rollbackSteps.push({\n      id: 'rollback-sqlite-index',\n      description: `Drop index ${indexName} if creation failed`,\n      sql: `DROP INDEX IF EXISTS ${indexName};`,\n      estimatedDurationMs: 2000,\n      canRollback: false,\n      requiresMaintenanceWindow: false,\n      riskLevel: 'LOW',\n      databaseSpecific: ['sqlite']\n    });\n  }\n\n  /**\n   * Generate PostgreSQL CREATE INDEX SQL\n   */\n  private generatePostgreSQLCreateIndexSQL(config: ConcurrentIndexPatternConfig, indexName: string): string {\n    const columnList = config.columnNames.join(', ');\n    const uniqueClause = config.unique ? 'UNIQUE ' : '';\n    const indexTypeClause = config.indexType ? ` USING ${config.indexType}` : '';\n    const partialClause = config.partial && config.partialCondition ? ` WHERE ${config.partialCondition}` : '';\n    \n    return `CREATE ${uniqueClause}INDEX CONCURRENTLY ${indexName} ON ${config.tableName}${indexTypeClause} (${columnList})${partialClause};`;\n  }\n\n  /**\n   * Generate MySQL CREATE INDEX SQL\n   */\n  private generateMySQLCreateIndexSQL(config: ConcurrentIndexPatternConfig, indexName: string): string {\n    const columnList = config.columnNames.join(', ');\n    const uniqueClause = config.unique ? 'UNIQUE ' : '';\n    const indexTypeClause = config.indexType && config.indexType !== 'BTREE' ? ` USING ${config.indexType}` : '';\n    const algorithm = config.online !== false ? 'ALGORITHM=INPLACE' : 'ALGORITHM=COPY';\n    const lock = config.online !== false ? 'LOCK=NONE' : 'LOCK=SHARED';\n    \n    return `ALTER TABLE ${config.tableName} ADD ${uniqueClause}INDEX ${indexName}${indexTypeClause} (${columnList}), ${algorithm}, ${lock};`;\n  }\n\n  /**\n   * Generate SQLite CREATE INDEX SQL\n   */\n  private generateSQLiteCreateIndexSQL(config: ConcurrentIndexPatternConfig, indexName: string): string {\n    const columnList = config.columnNames.join(', ');\n    const uniqueClause = config.unique ? 'UNIQUE ' : '';\n    const partialClause = config.partial && config.partialCondition ? ` WHERE ${config.partialCondition}` : '';\n    \n    return `CREATE ${uniqueClause}INDEX ${indexName} ON ${config.tableName} (${columnList})${partialClause};`;\n  }\n\n  /**\n   * Generate existing index check query\n   */\n  private generateExistingIndexCheckQuery(config: ConcurrentIndexPatternConfig): string {\n    return `\n      SELECT \n        indexname,\n        indexdef\n      FROM pg_indexes\n      WHERE tablename = '${config.tableName}'\n        AND indexdef LIKE '%${config.columnNames.join('%')}%';\n    `.trim();\n  }\n\n  /**\n   * Generate index estimation query\n   */\n  private generateIndexEstimationQuery(config: ConcurrentIndexPatternConfig): string {\n    return `\n      SELECT \n        schemaname,\n        tablename,\n        attname,\n        n_distinct,\n        correlation,\n        most_common_vals\n      FROM pg_stats\n      WHERE tablename = '${config.tableName}'\n        AND attname IN ('${config.columnNames.join(\"', '\")}');\n    `.trim();\n  }\n\n  /**\n   * Generate storage engine check query for MySQL\n   */\n  private generateStorageEngineCheckQuery(config: ConcurrentIndexPatternConfig): string {\n    return `\n      SELECT \n        table_name,\n        engine\n      FROM information_schema.tables\n      WHERE table_name = '${config.tableName}'\n        AND table_schema = DATABASE();\n    `.trim();\n  }\n\n  /**\n   * Generate disk space check query for MySQL\n   */\n  private generateDiskSpaceCheckQuery(): string {\n    return `\n      SELECT \n        @@datadir as data_directory,\n        ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) as total_size_mb\n      FROM information_schema.tables\n      WHERE table_schema = DATABASE();\n    `.trim();\n  }\n\n  /**\n   * Generate index validation query\n   */\n  private generateIndexValidationQuery(tableName: string, indexName: string): string {\n    return `\n      SELECT \n        indexname\n      FROM pg_indexes\n      WHERE tablename = '${tableName}'\n        AND indexname = '${indexName}';\n    `.trim();\n  }\n\n  /**\n   * Generate validation queries for the index\n   */\n  public generateValidationQueries(config: ConcurrentIndexPatternConfig): string[] {\n    const indexName = config.indexName || this.generateIndexName(config);\n    \n    const queries = [\n      this.generateIndexValidationQuery(config.tableName, indexName),\n      `SELECT COUNT(*) FROM ${config.tableName};` // Verify table accessibility\n    ];\n\n    if (config.databaseType === 'postgresql') {\n      queries.push(`\n        SELECT \n          schemaname,\n          tablename,\n          indexname,\n          indexdef\n        FROM pg_indexes\n        WHERE tablename = '${config.tableName}'\n          AND indexname = '${indexName}';\n      `);\n    }\n\n    return queries;\n  }\n\n  /**\n   * Estimate performance impact of concurrent index creation\n   */\n  public estimatePerformanceImpact(\n    config: ConcurrentIndexPatternConfig,\n    tableRowCount: number\n  ): {\n    estimatedDurationMs: number;\n    memoryUsageMB: number;\n    diskSpaceRequiredMB: number;\n    recommendedMaintenanceWindow: boolean;\n    indexSizeEstimateMB: number;\n  } {\n    // Base calculation factors\n    const rowsPerSecond = config.databaseType === 'postgresql' ? 5000 : \n                         config.databaseType === 'mysql' ? 8000 : 15000; // SQLite is fastest for small tables\n    \n    // Calculate duration based on table size and index complexity\n    const complexityFactor = config.columnNames.length * 1.2;\n    const uniqueFactor = config.unique ? 1.3 : 1.0;\n    const partialFactor = config.partial ? 0.7 : 1.0;\n    \n    const baseDuration = (tableRowCount / rowsPerSecond) * 1000;\n    const adjustedDuration = baseDuration * complexityFactor * uniqueFactor * partialFactor;\n    \n    // Memory usage estimation\n    const memoryPerRow = 0.002; // 2KB per row for index creation\n    const memoryUsageMB = Math.max(100, tableRowCount * memoryPerRow);\n    \n    // Disk space estimation for index\n    const avgRowSize = 50; // bytes per index entry\n    const indexSizeEstimateMB = Math.max(5, (tableRowCount * avgRowSize * config.columnNames.length) / (1024 * 1024));\n    \n    // Additional disk space for temporary operations\n    const diskSpaceRequiredMB = indexSizeEstimateMB * (config.databaseType === 'mysql' ? 2.5 : 1.5); // MySQL needs more temp space\n    \n    // Maintenance window recommendation\n    const recommendedMaintenanceWindow = \n      config.databaseType === 'sqlite' || // SQLite always locks\n      tableRowCount > 1000000 || // Very large tables\n      config.indexType === 'GIN' || config.indexType === 'GIST'; // Complex index types\n    \n    return {\n      estimatedDurationMs: Math.round(adjustedDuration),\n      memoryUsageMB: Math.round(memoryUsageMB),\n      diskSpaceRequiredMB: Math.round(diskSpaceRequiredMB),\n      recommendedMaintenanceWindow,\n      indexSizeEstimateMB: Math.round(indexSizeEstimateMB)\n    };\n  }\n}"],"mappings":"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","names":[]}